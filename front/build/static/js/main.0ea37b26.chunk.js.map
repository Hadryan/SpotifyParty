{"version":3,"sources":["hash.js","topheader/topheader.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","scopes","TopHeader","props","state","loggedIn","token","email","username","console","log","process","_token","access_token","this","getAccessToken","getAccountInfo","setState","$","url","type","beforeSend","xhr","setRequestHeader","success","data","display_name","Navbar","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","join","NavDropdown","title","Item","Divider","Form","inline","FormControl","placeholder","Button","variant","React","Component","Dashboard","getMusicInfo","undefined","refreshToggled","authToken","name","artists","album","onClick","src","images","alt","App","getLoginState","itemPlaying","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ea37b26.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            loggedIn: false,\r\n            token: null,\r\n            email: null,\r\n            username: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        console.log(\"URI\", redirect_uri);\r\n        let _token = hash.access_token;\r\n        if (_token) {\r\n            // Set token\r\n            console.log(\"token is: \", _token);\r\n            this.props.getAccessToken(_token);\r\n            this.getAccountInfo(_token);\r\n            this.setState({\r\n                loggedIn: true,\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                loggedIn: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    getAccountInfo(token) {\r\n        $.ajax( \r\n        {\r\n            url: \"https://api.spotify.com/v1/me\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            },\r\n            success: (data) => {\r\n                this.setState({\r\n                    username: data.display_name\r\n                });\r\n                console.log(this.state.email);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar className=\"topheader\" bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\">Spotify Party</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    </Nav>\r\n                    { this.state.loggedIn === false ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link href=\r\n                        {`${authEndpoint}?client_id=${client_id}&redirect_uri=${redirect_uri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav className=\"ml-auto\">\r\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#\">Hello, {this.state.username}</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#\">Preferences</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    }\r\n                    \r\n\r\n                    <Form inline className=\"searchButton\">\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button  variant=\"outline-success\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport * as $ from \"jquery\";\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            loggedIn: true,\r\n            item: null,\r\n            authToken: props.token,\r\n            refreshToggled: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.token !== undefined)\r\n        {\r\n            this.getMusicInfo(this.props.token);\r\n        }  \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo(this.state.authToken);\r\n        }\r\n            \r\n    }\r\n\r\n    getMusicInfo = (token) => {\r\n        $.ajax( \r\n        {\r\n            url: \"https://api.spotify.com/v1/me/player\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            },\r\n            success: (data) => {\r\n                if(data !== undefined)\r\n                {\r\n                    this.setState({\r\n                        item: data.item,\r\n                        refreshToggled: false,\r\n                    });\r\n                }\r\n                \r\n            }\r\n        });\r\n        \r\n    }\r\n    \r\n    render(){\r\n        \r\n        return (\r\n            <div className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 border\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h2>My groups</h2>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying border\">\r\n                        { this.state.item === null ?\r\n                            <h2>Now Playing: [Nothing is playing]</h2>\r\n                        :\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <h2>Now Playing: {this.state.item.name}</h2>\r\n                                    <h4>Artist: {this.state.item.artists[0].name}</h4>\r\n                                    <h4>Album: {this.state.item.album.name}</h4>\r\n                                    <button className=\"btn btn-secondary\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img>\r\n                                    \r\n                                </div>\r\n                                \r\n                            </div>\r\n                            \r\n                            \r\n                        }\r\n                        \r\n                        \r\n                        \r\n                    </div>\r\n                    <div className=\"row nextup border\">\r\n                        <h2>Next up:</h2>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3 border\">\r\n                    <h2>Chat</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport TopHeader from './topheader/topheader';\nimport Dashboard from './dashboard/dashboard';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      access_token: null,\n      itemPlaying:'HEHEH',\n      loggedIn: false,\n    };\n  };\n\n  getAccessToken = (token) => {\n    this.setState({access_token: token});\n    \n  }\n  \n  getLoginState = (state) => {\n    if(state ===true){\n      this.setState({loggedIn: true});\n    }\n    else{\n      this.setState({loggedIn: false});\n    }\n  }\n\n  render()\n  {  \n    return (\n      <div className=\"App\">\n\n          { this.state.access_token == null ?\n            <TopHeader getAccessToken={this.getAccessToken}/>\n          :\n            <TopHeader getAccessToken={this.getAccessToken}/>\n          }\n          \n          \n          { this.state.access_token == null ?\n            <div>\n              <Dashboard />\n            </div>\n          :\n            <Dashboard token={this.state.access_token} />\n          }\n          \n        \n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}