{"version":3,"sources":["topheader/img/logoW.svg","img/vynil.svg","img/record.svg","hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","process","REACT_APP_CLIENT_ID","REACT_APP_REDIRECT_URI","props","state","user","userid","devicename","deviceactive","this","console","log","fetch","then","res","json","setState","getID","Navbar","className","expand","Brand","href","alt","src","logo","Toggle","bg","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","React","Component","MyGroups","handleSelectedPlaylist","val","name","getplaylist","handleInputChange","event","target","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","resp","getgroups","handleAddGroupSubmit","newGroup","newgroup","userID","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","groups","selectedGroup","updatedPlaylist","playlistToMyGroups","map","element","i","playlists","length","groupname","playlist","index","tracklist","newgroups","getAllgroups","Accordion","defaultActiveKey","group","Card","as","Header","eventKey","Body","members","member","Button","onSubmit","Form","role","Group","Control","type","onChange","placeholder","variant","ToggleButtonGroup","vertical","ToggleButton","Nextup","getTrackInfos","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","searchSubmit","searchedTrack","items","foundTracks","addSongtoMongo","song","uriTrack","playlistname","getUpdatedPlaylist","nextup","urilist","style","Table","striped","border","div","class","onClick","bind","Dashboard","getMusicInfo","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","playSong","songuri","deviceID","iteratorPlaylist","playlistDisplay","setTimeout","changePlaybackTriggerNext","changePlaybackTriggerPrevious","changePlaybackNext","alert","changePlaybackPrevious","getSelectedPlaylist","getSelectedGroup","addedSongtoPlaylist","playListCommandtrigger","changePlayback","getGroup","disabled","images","url","App","loggedin","userState","getUserToggled","statusCode","displayname","catch","err","deviceid","Vynil","Record","x2","y1","y2","points","cx","cy","r","transform","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e65cc80c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoW.a156b25d.svg\";","module.exports = __webpack_public_path__ + \"static/media/vynil.2840d63a.svg\";","module.exports = __webpack_public_path__ + \"static/media/record.b3d8db83.svg\";","const hash = window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce(function(initial, item) {\n        if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n    }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React from 'react';\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\nimport './topheader.css';\nimport hash from \"../hash\";\nimport * as $ from \"jquery\";\nimport logo from './img/logoW.svg'\n\n\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nconst client_id = process.env.REACT_APP_CLIENT_ID;\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\",\n  \"user-read-email\",\n];\n\n\nclass TopHeader extends React.Component{\n    \n    constructor(props){\n        super();\n        \n        this.state = {\n            user: null,\n            userid: null,\n            devicename: null, \n            deviceactive: false,\n        };\n    }\n\n    componentDidMount() {\n        if(this.state.userid === null)\n        {\n            console.log(\"Requesting client id...\");\n            fetch(\"/authorize\")\n            .then(res => res.json()\n            .then(res => {\n                console.log(\"Fetched client ID:\", res.userid);\n                this.setState({userid: res.userid});\n                console.log(\"client id:\", this.state.userid);\n                this.props.getID(res.userid);\n            }));\n        }\n        \n    }\n\n    componentDidUpdate() {\n\n        if(this.props.user !== this.state.user)\n        {this.setState({user: this.props.user});}\n\n        if(this.state.devicename !== this.props.devicename && this.props.devicename !== null)\n        {\n            this.setState({devicename: this.props.devicename, deviceactive: `${this.props.deviceactive}`})\n        }\n        \n    }\n\n    render(){\n        \n        return (\n            \n            <Navbar  className=\"topheader\"  expand=\"lg\">\n                <Navbar.Brand className=\"brandLogo\" href=\"/\"><img className=\"logo\" alt=\"logo\" src={logo}/></Navbar.Brand>\n                <Navbar.Toggle bg=\"light\" aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse bg=\"light\" id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    </Nav>\n                    { (this.state.user === null) ?\n                    <Nav className=\"ml-auto logintag\">\n                        <Nav.Link className=\"topheader unique white\" href={`/login/${this.state.userid}`}>Login with Spotify</Nav.Link>\n                    </Nav>\n                    :\n                    <Nav bg=\"light\" className=\"ml-auto\">\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\n\n                            <NavDropdown.Item className=\"white\">Hello, {this.state.user}</NavDropdown.Item>\n\n                            <NavDropdown.Item className=\"white\">Device name: {this.state.devicename}</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item className=\"white\" href=\"/\">Log out</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    } \n                </Navbar.Collapse>\n            </Navbar>\n            \n        );\n    }\n}\n\nexport default TopHeader;","import React from 'react';\nimport './mygroups.css';\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\n\nclass MyGroups extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            user: null,\n            userID: null,\n            loggedIn: false,\n            getgroups: false,\n            groups: null,\n            newPlaylist: '',\n            newPlaylistGroup: '',\n            newGroup: '',\n            newMember: '',\n            newMemberGroup: '',\n            selectedGroup: null,\n            updatedPlaylist: null,\n        }\n    }\n\n    componentDidUpdate(){\n        if(this.props.user !== this.state.user && this.props.user !== null && this.state.userID !== this.props.userid) // when user changes\n        {\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true, userID: this.props.userid});\n            \n        }\n\n        if(this.state.selectedGroup !== this.props.selectedGroup)\n        {\n            this.setState({selectedGroup: this.props.selectedGroup});\n        }\n\n        if(this.state.groups !== null && this.state.selectedGroup !== null && this.props.playlistToMyGroups !== this.state.updatedPlaylist)\n        {\n            var groups = this.state.groups;\n            groups.map((element, i) => {\n                if(element.playlists.length && element.groupname === this.state.selectedGroup)\n                {\n                    var playlists = element.playlists;\n                    playlists.map((playlist, index) => {\n                        if(playlist.name === this.props.playlistToMyGroups.name)\n                        {\n                            console.log(\"Old tracklist:\", playlist.tracklist);\n                            console.log(\"to update with:\", this.props.playlistToMyGroups.tracklist);\n                            if(playlist.tracklist !== this.props.playlistToMyGroups.tracklist)\n                            {\n                                \n                                var newgroups = groups;\n                                newgroups[i].playlists[index].tracklist = this.props.playlistToMyGroups.tracklist;\n                                this.setState({groups: newgroups, updatedPlaylist: this.props.playlistToMyGroups});\n                            }\n                        }\n                    });\n                }\n            });\n        }    \n\n        if(this.state.loggedIn === true && this.state.getgroups === true)\n        {\n            this.getAllgroups();\n        }\n    }\n\n    getAllgroups() {\n        fetch(\"/getallgroups\", {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({userid: this.state.userID}),\n        })\n        .then(res => res.json()\n        .then(res => {\n            console.log(\"Res is: \", res);\n            this.setState({groups: res, getgroups: false})\n            \n        }));\n    }\n\n    handleSelectedPlaylist = (val) => {\n        console.log(\"Selected playlist in MyGroups: \", `${val[0].name} from group: ${val[1]}`);\n        this.props.getplaylist(val[0], val[1]);\n        //this.props.getGroup(val[1]);\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: [event.target.value], \n        })\n    }\n\n    handleAddPlaylistSubmit = (event) => {\n        event.preventDefault();\n        if(event.target.newPlaylist.value !== '')\n        {\n            fetch('/createplaylist', \n            {\n                method: 'POST', \n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\n                headers: { 'Content-Type': 'application/json' },\n            }).then(res => res.json())\n            .then(resp => {\n                console.log(\"addplaylist response:\", resp);\n                if(resp !== null)\n                {\n                    this.setState({newPlaylist: '', newPlaylistGroup: '', getgroups: true});\n                    console.log(this.state.newPlaylist);\n                }\n            });\n        }\n    }\n\n    handleAddGroupSubmit = (event) => {\n        event.preventDefault();\n        if(event.target.newGroup.value !== '')\n        {\n            fetch('/creategroup', \n            {\n                method: 'POST', \n                body: JSON.stringify({newgroup: `${this.state.newGroup}`, userid: this.state.userID}),\n                headers: { 'Content-Type': 'application/json' },\n            }).then(res => res.json())\n            .then(resp => {\n                if(resp !== null)\n                {\n                    this.setState({newGroup: '', getgroups: true});\n                }\n            });\n        }\n    }\n\n    handleAddMemberSubmit = (event) => {\n        event.preventDefault();\n        if(event.target.newMember.value !== '')\n        {\n            fetch('/addmember', \n            {\n                method: 'POST', \n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\n                headers: { 'Content-Type': 'application/json' },\n            }).then(res => res.json())\n            .then(resp => {\n                if(resp !== null)\n                {\n                    this.setState({newMember: '', newMemberGroup: '', getgroups: true});\n                    \n                }\n            });\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"fullsize\">\n                { this.state.user !== null ?\n                    <div className=\"fullsize\">\n\n                        { this.state.groups !== null ?\n                            <Accordion defaultActiveKey=\"0\">\n                                {   this.state.groups.map((group, index) =>\n                                    {\n                                        return (\n                                        <Card>\n                                            <Accordion.Toggle as={Card.Header} eventKey={index}>\n                                                {group.groupname}\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={index}>\n                                                <Card.Body>\n                                                    <h4>Members</h4>\n                                                    <ul>\n                                                        {group.members.map((member, i) => {\n                                                            return(<h6>{member}</h6>)\n                                                            })\n                                                        }\n                                                    </ul>\n                                                    <Accordion>\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\n                                                            Add Member\n                                                        </Accordion.Toggle>\n                                                       \n                                                        <Accordion.Collapse eventKey={3}>\n                                                            <Card.Body>\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\n                                                                    <Form role=\"form\">\n                                                                        <Form.Group>\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\n                                                                            \n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\n                                                                                Add\n                                                                            </Button>\n                                                                        </Form.Group>\n                                                                    </Form>\n                                                                </form>\n                                                            </Card.Body>\n                                                        </Accordion.Collapse>\n                                                    </Accordion>\n                                                    <h4 className=\"btnAddPlaylist\">Playlists</h4>\n                                                    <div id=\"fixedspacing\">\n                                                        <p></p>\n                                                    </div>\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\n                                                        {group.playlists.map((playlist, i) => {\n                                                            return(\n            \n                                                                <ToggleButton value={[this.state.groups[index].playlists[i],this.state.groups[index].groupname]} >{playlist.name}</ToggleButton>\n                                                                \n                                                            )\n                                                        })\n                                                        }\n                                                    </ToggleButtonGroup>\n                                                    <div id=\"fixedspacing\">\n                                                        <p></p>\n                                                    </div>\n                                                    <Accordion>\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\n                                                            Create Playlist\n                                                        </Accordion.Toggle>\n                                                       \n                                                        <Accordion.Collapse eventKey={2}>\n                                                            <Card.Body>\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\n                                                                    <Form role=\"form\">\n                                                                        <Form.Group>\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\n                                                                            \n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\n                                                                                Create\n                                                                            </Button>\n                                                                        </Form.Group>\n                                                                    </Form>\n                                                                </form>\n                                                            </Card.Body>\n                                                        </Accordion.Collapse>\n                                                    </Accordion>\n                                              </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>\n                                        \n                                        )\n                                    })\n                                }\n                            </Accordion> \n                        :\n                            <div>\n                                \n                            </div>\n                        }\n\n                        <Accordion>\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\n                                Create Group\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey={1}>\n                                <Card.Body>\n                                    <form onSubmit={this.handleAddGroupSubmit}>\n                                        <Form>\n                                            <Form.Group>\n                                            <Form.Control className=\"input\" onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\n                                            </Form.Group>\n                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\n                                                Create\n                                            </Button>\n                                        </Form>\n                                    </form>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Accordion>\n                            \n                    </div>\n                    :\n                    <h4>Not logged in</h4>\n                }\n                    \n                \n            </div>\n        );\n    }\n}\nexport default MyGroups;","import React, { useLayoutEffect } from 'react';\nimport './nextup.css';\nimport {Table} from 'react-bootstrap';\n\nclass Nextup extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            group: '',\n            userID: null,\n            playlist: null,\n            playlistname: null,\n            tracklist: [[\"\", \"\"]],\n            nextup: 0,\n            searchedTrack: '',\n            foundTracks: [],\n        }\n    }\n\n    componentDidUpdate(){\n        \n        if(this.state.playlist !== this.props.playlist && this.props.playlist !== null && this.props.groups !== this.state.group)\n        { \n            var urilist = [];\n            this.props.playlist.tracklist.map((element,i) => {\n                return  urilist[i] = element;\n            });\n            this.setState({playlist: this.props.playlist, playlistname: this.props.playlist.name, group: this.props.group});\n            if(urilist.length > 0)\n            {\n                this.getTrackInfos(urilist);\n            }\n            else{\n                this.setState({tracklist: [[\"\", \"\"]]});\n            }\n        }\n\n        if(this.props.user !== null && this.state.userID !== this.props.userid)\n        {\n            this.setState({userID: this.props.userid});\n        }\n\n        if(this.state.nextup !== this.props.nextup)\n        {\n            if(this.props.nextup < this.state.tracklist.length)\n            {\n                this.setState({nextup: this.props.nextup});\n            }\n\n            if(this.state.tracklist.length === 0)\n            {\n                this.setState({nextup: 0});\n            }\n            \n        }\n\n    \n    }\n\n    getTrackInfos = (tracklist) => {\n        fetch(\"/gettracksinfo\", \n        {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({tracks: tracklist, userid: this.state.userID}),\n        }).then(res => res.json()\n        .then(res => {\n            console.log(\"Fetched tracks info:\", res);\n            var tracks = [];\n            res.map((track, i) => {\n                return tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\n            });\n            console.log(\"Tracks:\", tracks);\n            this.setState({tracklist: tracks});\n        }));\n        \n    } \n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: [event.target.value], \n        })\n    }\n\n    searchSubmit = (event) => {\n        event.preventDefault();\n        if(event.target.searchedTrack.value !== '')\n        {\n            fetch('/searchtracks', {\n                method:'POST',\n                body: JSON.stringify({searchedTrack: `${this.state.searchedTrack}`, userid: this.state.userID}),\n                headers: { 'Content-Type': 'application/json' },\n            }).then(res => res.json())\n            .then(resp => {\n                if(resp !== null)\n                {\n                    console.log(\"Returned tracks:\", resp.items);\n                    var tracks = [];\n                    resp.items.map((track, index) => {\n                        return tracks[index] = [track.name, track.artists[0].name, track.album.name, track.uri];\n                    })\n                    this.setState({foundTracks: tracks, searchedTrack: ''});\n                    console.log(\"tracks: \", this.state.foundTracks);\n                }\n            });\n        }\n        \n    }\n\n    addSongtoMongo = (song) => {\n        console.log(song.target.value);\n        var uri = song.target.value.split(':');\n        fetch(\"/addtracktoplaylist\", {\n            method:'POST',\n            body: JSON.stringify({uriTrack: `${uri[2]}`,playlist: `${this.state.playlistname}`, group: `${this.state.group}`, userid: this.state.userID}),\n            headers: { 'Content-Type': 'application/json' },\n        }).then(res => res.json())\n        .then(resp => {\n            console.log(\"Playlists\", resp);\n            this.setState({foundTracks: []});\n            this.props.getUpdatedPlaylist(resp, this.state.group);\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"row nextupAddsong\" style={{}}>\n                <div className=\"col-6\">\n                { this.state.playlist !== null ?\n                    <div className=\"nextup\">\n                        <h3>Next up: {this.state.tracklist[this.state.nextup][0]} - {this.state.tracklist[this.state.nextup][1]}</h3>\n                        <label>Playlist name: {this.state.playlistname} Group: {this.state.group}</label>\n                        <Table striped border>\n                            <thead>\n                                <th>#</th>\n                                <th>Song</th>\n                                <th>Artist</th>\n                                <th>Album</th>\n                                <th>Duration</th>\n                            </thead>\n                            <tbody>\n                            {this.state.tracklist.map((element, index) => {\n                                return(<tr>\n                                    <td>{index+1}</td>\n                                    <td>{element[0]}</td>\n                                    <td>{element[1]}</td>\n                                    <td>{element[2]}</td>\n                                    <td>{element[3]}</td>\n                                </tr>)\n                            })\n                            }\n                            </tbody>\n                        </Table>\n                        \n                    </div>\n                :\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\n                }\n                </div>\n                <div className=\"col-6\">\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\n                    { this.state.playlist !== null ?\n                    <div>\n                        <form class=\"form-inline justify-content-center\" onSubmit={this.searchSubmit}>\n                            <div class=\"form-group mb-2 \">\n                                <input onChange={this.handleInputChange} className=\"form-control\" name=\"searchedTrack\" value={this.state.searchedTrack} type=\"text\" placeholder=\"Search song...\"/>\n                            </div>\n                            <button className=\"btn btn-success mb-2\" type=\"submit\">Search</button>\n                        </form>\n                        <Table striped border>\n                            <thead>\n                                <th>Song</th>\n                                <th>Artist</th>\n                                <th>Album</th>\n                                <th>Select</th>\n                            </thead>\n                            { this.state.foundTracks.length > 0 ?\n                                <tbody>\n                                {this.state.foundTracks.map((element, index) => {\n                                    return(\n                                        <tr>\n                                            <td>{element[0]}</td>\n                                            <td>{element[1]}</td>\n                                            <td>{element[2]}</td>\n                                            <td>\n                                                <button onClick={this.addSongtoMongo.bind(this)} value={element[3]} className=\"btn btn-success\">Add</button>\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                                }   \n                                </tbody>\n                                :\n                                <tbody>\n\n                                </tbody>\n                            }\n                            \n                        </Table>\n                    </div>\n                    :\n                    <div>\n                    </div>\n                    }\n                </div>\n                \n            </div>\n        );\n    }\n}\nexport default Nextup;","import React from 'react';\nimport MyGroups from './mygroups/mygroups.js';\nimport Nextup from './nextup/nextup.js';\nimport './dashboard.css'\n\nclass Dashboard extends React.Component{\n    \n    constructor(props){\n        super();\n        this.state = {\n            user: null,\n            deviceID: null,\n            userID: null,\n            loggedIn: false,\n            item: null,\n            refreshToggled: false,\n            playbackCommandtrigger: false,\n            playListCommandtrigger: false,\n            changePlaybackTriggerNext: false,\n            changePlaybackTriggerPrevious: false,\n            changePlayback: null,\n            playback: null,\n            playlistDisplay: null,\n            playlistToMyGroups: null,\n            iteratorPlaylist:0,\n            group: '',\n        };\n    }\n\n    componentDidMount(){\n    }\n\n    componentDidUpdate(){\n\n        if(this.state.userID !== null && this.props.user !== this.state.user && this.props.user !== null && this.props.deviceID !== this.state.deviceID && this.props.deviceID !== null) // when user changes\n        {\n            this.setState({user: this.props.user, loggedIn: true, deviceID: this.props.deviceID});\n            this.getMusicInfo();\n        }\n\n        if(this.props.userid !== null && this.props.userid !== this.state.userID)\n        {\n            this.setState({userID: this.props.userid});\n        }\n\n        if(this.state.refreshToggled)\n        {\n            console.log('Refreshed');\n            this.getMusicInfo();\n        }\n\n        if(this.state.playbackCommandtrigger)\n        {\n            console.log('Triggered Play/pause');\n            if(this.state.playback === true)\n            {\n                console.log('play');\n                this.playpausePlayback(\"play\");\n            }\n            else\n            {\n                console.log('pause');\n                this.playpausePlayback(\"pause\");\n            } \n        }\n\n        if(this.state.changePlaybackTriggerNext)\n        {\n            \n            var i = this.state.iteratorPlaylist;\n            console.log(\"size:\", this.state.playlistDisplay.tracklist.length);\n            console.log(\"iterator: \", i);\n            console.log('next song: ',this.state.playlistDisplay.tracklist[i]);\n            \n            this.playSong(this.state.playlistDisplay.tracklist[i]);\n            \n        }\n        if(this.state.changePlaybackTriggerPrevious)\n        {   \n            if(this.state.iteratorPlaylist > 0)\n            {\n                var i = this.state.iteratorPlaylist -1;\n            }\n            else\n            {\n                var i = 0;\n            }\n            console.log('previous song: ',this.state.playlistDisplay.tracklist[i]);\n            \n            this.playSong(this.state.playlistDisplay.tracklist[i]);\n        }\n    }\n\n    getMusicInfo = () => {\n        console.log(\"Fetching playback info...\");\n        fetch(\"/getplayback\", {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({userid: this.state.userID}),\n          })\n        .then(res => res.json()\n        .then(res => {\n            console.log(\"res is:\" , res);\n            if(res !== null && res!== undefined)\n            {\n                console.log(\"Fetched!\");\n                this.setState({\n                    item: res.item,\n                    refreshToggled: false,\n                    playback: res.is_playing,\n                });\n            }\n        })\n        );\n    }\n    \n    playpausePlayback = (action) => {\n        console.log(\"Playing/pausing playback...\");\n        fetch(\"/\"+action, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({userid: this.state.userID}),\n          })\n        .then(res => res.json()\n        .then(res => {\n            \n            if(res !== null)\n            {\n                console.log(\"Done!: \", res);\n                this.setState({\n                    playbackCommandtrigger: false,\n                });\n            }\n        })\n        );\n        \n    }\n\n    playSong = (songuri) => {\n        fetch(\"/playsong\", \n        {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`, userid: this.state.userID}),\n        }).then(res => res.json()\n        .then(res => {\n            console.log(res);\n            if((this.state.iteratorPlaylist) < this.state.playlistDisplay.tracklist.length)\n            {\n                console.log(\"Waiting for spotify to change song...\");\n                setTimeout( () => {\n                    if(this.state.changePlaybackTriggerNext)\n                    {\n                        this.setState({\n                            refreshToggled: true,\n                            changePlaybackTriggerNext: false,\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\n                        });\n                    }\n                    else if(this.state.changePlaybackTriggerPrevious){\n                        this.setState({\n                            refreshToggled: true,\n                            changePlaybackTriggerPrevious: false,\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\n                        });\n                    }\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\n            }\n            else{\n                setTimeout( () => {\n                    this.setState({refreshToggled: true, changePlaybackTriggerNext: false, iteratorPlaylist: 0});\n                    console.log(\"Reset iterator: \", this.state.iteratorPlaylist);\n                \n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\n            }\n           \n        }));\n        \n    } \n\n    changePlaybackNext = () => {\n        console.log(\"Changing playback...\");\n        fetch(\"/next\")\n        .then(res => res.json()\n        .then(res => {\n            \n            if(res !== null)\n            {\n                console.log(\"Fetched!: \", res);\n                this.setState({\n                    changePlaybackTriggerNext: false,\n                });\n                console.log(\"Waiting for spotify to change song...\");\n                setTimeout( () => {\n                    this.setState({refreshToggled: true});\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\n                    \n            }\n            else{\n                alert(\"Error from spotify\");\n            }\n        })\n        );\n        \n    }\n\n    changePlaybackPrevious = (action) => {\n        console.log(\"Changing playback...\");\n        fetch(\"/previous\")\n        .then(res => res.json()\n        .then(res => {\n            \n            if(res !== null)\n            {\n                console.log(\"Fetched!: \", res);\n                this.setState({\n                    changePlaybackTriggerPrevious: false,\n                });\n                console.log(\"Waiting for spotify to change song...\");\n                setTimeout( () => {\n                    this.setState({refreshToggled: true});\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\n                    \n            }\n            else{\n                alert(\"Error from spotify\");\n            }\n        })\n        );\n        \n    }\n\n    getSelectedPlaylist = (playlist, group) => {\n        console.log(\"Got selected playlist in dashboard: \", `${playlist.tracklist} from group: ${group}`);\n        this.setState({playlistDisplay: playlist, iteratorPlaylist: 0, group: group});\n    }\n\n    getSelectedGroup = (group) => {\n        console.log(\"Got selected group in dashboard: \", group);\n        this.setState({group: group});\n    }\n\n    addedSongtoPlaylist = (newplaylist, group) => {\n        console.log(\"Got updated playlist in dashboard: \", `${newplaylist} from group: ${group}`);\n        this.setState({playlistDisplay: newplaylist, playlistToMyGroups: newplaylist, group: group});\n    }\n\n    render(){\n        \n        return (\n            <div id=\"mainrow\" className=\"row\">    \n                <div id=\"mygroups\" className=\"col-2 \">\n                    <div className=\"row justify-content-center groupR\">\n                        <h2 className=\"titleGroup\">My groups</h2>\n                        <MyGroups userid={this.state.userID} user={this.state.user} getplaylist={this.getSelectedPlaylist} getGroup={this.getSelectedGroup} selectedGroup={this.state.group} playlistToMyGroups={this.state.playlistToMyGroups}/>\n                    </div>\n                    \n                </div>\n                <div className=\"col-7\">\n                    <div className=\"row nowplaying \">\n                        <div className=\"col-6\">\n                            { (this.state.item === null || this.state.item === undefined) ?\n                                <div>    \n                                    <h2 className=\"nowP\">Now Playing: [Nothing is playing]</h2>\n                                    <button className=\"btn btn-warning res\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\n                                    { this.state.playlistDisplay !== null ?\n                                        <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Play Next</button>\n                                    :\n                                        <div>\n                                        </div>\n                                    }\n                                </div>\n                            : \n                                <div>\n                                    <h2 className=\"nowP\">Now Playing:</h2>\n                                    <h5 className=\"songName\">{this.state.item.name}</h5>\n                                    <h6 className=\"artistName\">Artist: {this.state.item.artists[0].name}</h6>\n                                    <h6 className=\"albumName\">Album: {this.state.item.album.name}</h6>\n                                    \n                                    <button className=\"btn btn-warning res\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\n                                    { this.state.playback ?\n                                        <button className=\"btn btn-danger res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\n                                    :\n                                        <button className=\"btn btn-success res\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\n                                    }\n                                    { this.state.playlistDisplay !== null && this.state.iteratorPlaylist < this.state.playlistDisplay.tracklist.length ?\n                                        <button className=\"btn btn-primary res\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>\n                                    :\n                                        <button className=\"btn btn-primary res\" disabled>Next</button>\n                                    }\n                                    \n                                </div>\n                            }\n                        </div>\n                        <div className=\"col-6\">\n                            { (this.state.item === null || this.state.item === undefined) ?\n                                <h2></h2>\n                            :\n                                <div>\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \n                                    \n                                </div>\n                            }\n                            \n                        </div>\n                        \n                    </div>\n                    <div>\n                        <Nextup userid={this.state.userID} playlist={this.state.playlistDisplay} getUpdatedPlaylist={this.addedSongtoPlaylist} group={this.state.group} nextup={this.state.iteratorPlaylist}/>\n                    </div>\n                    \n                </div>\n                <div id=\"chat\" className=\"col-3 \">\n                    <h2 className=\"chat\">Chat</h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;","import React from 'react';\nimport TopHeader from './topheader/topheader';\nimport Dashboard from './dashboard/dashboard';\nimport './App.css';\nimport Vynil from './img/vynil.svg';\nimport Record from './img/record.svg';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      loggedin: false,\n      userState: null,\n      deviceID: null,\n      devicename: null,\n      deviceactive: false,\n      userID: null,\n      getUserToggled: false\n    };\n  };\n\n  componentDidMount(){\n    if(this.state.userID === null)\n        {\n            console.log(\"Requesting client id...\");\n            fetch(\"/authorize\")\n            .then(res => res.json()\n            .then(res => {\n                console.log(\"Fetched client ID:\", res.userid);\n                this.setState({userid: res.userid});\n                console.log(\"client id:\", this.state.userid);\n                this.getID(res.userid);\n            }));\n    }\n    \n    console.log(\"entra\");\n    if(this.state.loggedin !== true)\n    {\n      console.log(\"fetching getUser...\");\n      fetch(\"/getUser\", \n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({userid: this.state.userID}),\n      })\n      .then(res => res.json()\n      .then(res => {\n        if(res.statusCode === 200)\n        {\n          if(res.displayname !== this.state.userState)\n          {\n            console.log(\"Fetched!\");\n            this.setState({userState: res.displayname, loggedin: true});\n          }\n        }\n        else{\n          console.log(\"Error code: \", res.statusCode);\n          if(res.statusCode === \"tryagain\")\n          {\n            this.setState({getUserToggled: true});\n          }\n        }\n        \n      }))\n      .catch(err =>{\n        console.log(\"Error with GetUser\");\n      });\n    }\n  }\n\n  componentDidUpdate(){\n\n\n    if(this.state.getUserToggled)\n    {\n      setTimeout( () => {\n        \n      \n      console.log(\"fetching getUser...\");\n      fetch(\"/getUser\", \n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({userid: this.state.userID}),\n      })\n      .then(res => res.json()\n      .then(res => {\n        if(res.statusCode === 200)\n        {\n          if(res.displayname !== this.state.userState)\n          {\n            console.log(\"Fetched!\");\n            this.setState({userState: res.displayname, loggedin: true, getUserToggled: false});\n          }\n        }\n        else{\n          console.log(\"Error code: \", res.statusCode);\n          if(res.statusCode === \"tryagain\")\n          {\n            this.setState({getUserToggled: true});\n          }\n        }\n        \n      }))\n      .catch(err =>{\n        console.log(\"Error with GetUser\");\n      });\n\n      }, 500);\n    }\n\n    if(this.state.deviceID === null && this.state.loggedin ===  true)\n    {\n      fetch(\"/mydevices\", {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({userid: this.state.userID}),\n      })\n      .then(res => res.json()\n      .then(res => {\n        if(res.length === 0)\n        {\n          alert(\"No listening is activated. Open your web browser at open.spotify.com, active your device (play/pause) and reload page.\");\n        }\n        else{\n          console.log(\"Device found: \", res[0]);\n          if(res[0].deviceid !== this.state.deviceID)\n        {\n          this.setState({deviceID: res[0].deviceid, devicename: res[0].devicename, deviceactive: res[0].deviceactive});\n        }\n        }\n        \n      }));\n    }\n  }\n\n  getID = (id) =>{\n    this.setState({userID: id});\n    console.log(\"App got client id:\", this.state.userID);\n  }\n\n  render()\n  {  \n    return (\n      <div className=\"App\">\n        {this.state.loggedin\n                  ? <div><TopHeader user={this.state.userState} getID={this.getID} devicename={this.state.devicename} deviceactive={this.state.deviceactive}/>\n                      <div className=\"container-fluid\">  \n                        <Dashboard user={this.state.userState} deviceID={this.state.deviceID} userid={this.state.userID}/>\n                      </div>\n                      </div>\n                  : <div className=\"Plus\">\n                    <header className=\"App-header\">\n                      <button className=\"Home\">\n                      </button>\n                      <div className=\"\">\n                        <a className=\"Login\" href={`/login/${this.state.userID}`}>\n                          Log In\n                        </a>\n                        <a href=\"https://www.spotify.com/us/\" className=\"Register\">\n                          Register Now!\n                        </a>\n                      </div>\n                    </header>\n                    <div className=\"MiddleTitle\">\n                      <h2 className=\"Black\">Be the life of the party!</h2>\n                      <h1 className=\"Title\">SHARING MUSIC</h1>\n                      <h1 className=\"Title\">NEVER FELT SO <span className=\"Outline\">GOOD</span></h1>\n                      <img alt=\"Vynil\" src={Vynil} className=\"Vynil\"/>\n                      <img alt=\"Record\" src={Record} className=\"Record\"/>\n                      <a  href={`/login/${this.state.userID}`}  className=\"Button\">\n                        <svg><g><line x2=\"227.62\" y1=\"31.28\" y2=\"31.28\"></line><polyline points=\"222.62 25.78 228.12 31.28 222.62 36.78\"></polyline><circle cx=\"224.67\" cy=\"30.94\" r=\"30.5\" transform=\"rotate(180 224.67 30.94) scale(1, -1) translate(0, -61)\"></circle></g>\n                        </svg><font>Enter the Sound</font>\n                      </a>\n                    </div>\n                    <footer className=\"Foot\">\n                      <p className=\"Copyright\">&#xA9; Antoine & Juan</p>\n                      <button className=\"About\">\n                      ABOUT\n                      </button>\n                    </footer>\n                 </div>\n        }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}