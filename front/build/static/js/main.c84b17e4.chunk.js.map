{"version":3,"sources":["hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","state","user","this","setState","Navbar","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","MyGroups","handleSelectedPlaylist","val","getplaylist","handleInputChange","event","target","name","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","fetch","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","then","res","json","valid","console","log","handleAddGroupSubmit","newGroup","newgroup","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","getgroups","groups","getAllgroups","Accordion","defaultActiveKey","map","group","index","Card","as","Header","eventKey","groupname","Body","members","member","i","onSubmit","role","Group","Control","onChange","ToggleButtonGroup","vertical","playlists","playlist","ToggleButton","Nextup","getTrackInfos","tracklist","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","nextup","playlistname","urilist","element","Table","striped","border","div","Dashboard","getMusicInfo","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","changePlaybackNext","changePlaybackTriggerNext","setTimeout","alert","changePlaybackPrevious","changePlaybackTriggerPrevious","getSelectedPlaylist","playlistDisplay","changePlayback","onClick","src","images","url","alt","App","userState","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c84b17e4.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        \r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar className=\"topheader\" bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\">Spotify Party</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    </Nav>\r\n                    { this.state.user === null ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link href=\"/login\">Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav className=\"ml-auto\">\r\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\r\n\r\n                            <NavDropdown.Item href=\"#\">Hello, {this.state.user}</NavDropdown.Item>\r\n\r\n                            <NavDropdown.Item href=\"#\">Preferences</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    }\r\n                    \r\n\r\n                    <Form inline className=\"searchButton\">\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button  variant=\"outline-success\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport './mygroups.css';\r\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\r\n\r\nclass MyGroups extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            loggedIn: false,\r\n            getgroups: false,\r\n            groups: null,\r\n            newPlaylist: '',\r\n            newPlaylistGroup: '',\r\n            newGroup: '',\r\n            newMember: '',\r\n            newMemberGroup: '',\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.user !== this.state.user && this.props.user !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true});\r\n            \r\n        }\r\n\r\n        if(this.state.loggedIn = true && this.state.getgroups === true)\r\n        {\r\n            this.getAllgroups();\r\n        }\r\n    }\r\n\r\n    getAllgroups() {\r\n        fetch(\"/getallgroups\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Res is: \", res);\r\n            this.setState({groups: res, getgroups: false})\r\n            \r\n        }));\r\n    }\r\n\r\n    handleSelectedPlaylist = (val) => {\r\n        this.props.getplaylist(val);\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    handleAddPlaylistSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newPlaylist.value !== '')\r\n        {\r\n            fetch('/createplaylist', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(valid => {\r\n                console.log(\"addplalist response:\", valid);\r\n                if(valid !== null)\r\n                {\r\n                    this.setState({newPlaylist: '', newPlaylistGroup: ''});\r\n                    console.log(this.state.newPlaylist);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddGroupSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newGroup.value !== '')\r\n        {\r\n            fetch('/creategroup', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newgroup: `${this.state.newGroup}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(valid => {\r\n                if(valid !== null)\r\n                {\r\n                    this.setState({newGroup: ''});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddMemberSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newMember.value !== '')\r\n        {\r\n            fetch('/addmember', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(valid => {\r\n                if(valid !== null)\r\n                {\r\n                    this.setState({newMember: '', newMemberGroup: ''});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"fullsize\">\r\n                { this.state.user !== null ?\r\n                    <div className=\"fullsize\">\r\n\r\n                        { this.state.groups !== null ?\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {   this.state.groups.map((group, index) =>\r\n                                    {\r\n                                        return (\r\n                                        <Card>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index}>\r\n                                                {group.groupname}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <h4>Members</h4>\r\n                                                    <ul>\r\n                                                        {group.members.map((member, i) => {\r\n                                                            return(<h6>{member}</h6>)\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\r\n                                                            Add Member\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={3}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                                    <h4 className=\"btnAddPlaylist\">Playlists</h4>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\r\n                                                        {group.playlists.map((playlist, i) => {\r\n                                                            return(\r\n            \r\n                                                                <ToggleButton value={this.state.groups[index].playlists[i]}>{playlist[0]}</ToggleButton>\r\n                                                                \r\n                                                            )\r\n                                                        })\r\n                                                        }\r\n                                                    </ToggleButtonGroup>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\r\n                                                            Create Playlist\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={2}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Create\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                              </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                        \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Accordion> \r\n                        :\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        }\r\n\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\r\n                                Create Group\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey={1}>\r\n                                <Card.Body>\r\n                                    <form onSubmit={this.handleAddGroupSubmit}>\r\n                                        <Form>\r\n                                            <Form.Group>\r\n                                            <Form.Control onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\r\n                                            </Form.Group>\r\n                                            <Button variant=\"success\" type=\"submit\">\r\n                                                Create\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </form>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                            \r\n                    </div>\r\n                    :\r\n                    <h4>Not logged in</h4>\r\n                }\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGroups;","import React from 'react';\r\nimport './nextup.css';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass Nextup extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            playlist: null,\r\n            playlistname: null,\r\n            tracklist: [],\r\n            nextup: [],\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.playlist !== this.props.playlist)\r\n        { \r\n            var urilist = [];\r\n            this.props.playlist.map((element,i) => {\r\n                if( i > 0)\r\n                {\r\n                    urilist[i-1] = element;\r\n                }\r\n            });\r\n            this.setState({playlist: this.props.playlist});\r\n            this.getTrackInfos(urilist);\r\n        }\r\n    }\r\n\r\n    getTrackInfos = (tracklist) => {\r\n        fetch(\"/gettracksinfo\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(tracklist),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetched tracks info:\", res);\r\n            var tracks = [];\r\n            res.map((track, i) => {\r\n                tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\r\n            });\r\n            console.log(\"Tracks:\", tracks);\r\n            this.setState({tracklist: tracks, nextup: tracks[0]});\r\n        }));\r\n        \r\n    } \r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row nextupAddsong border\">\r\n                <div className=\"col-6 border-right\">\r\n                { this.state.playlist !== null ?\r\n                    <div className=\"nextup\">\r\n                        <h3>Next up: {this.state.nextup[0]} ({this.state.nextup[1]})</h3>\r\n                        <label>Playlist name: {this.state.playlist[0]}</label>\r\n                        <Table striped border>\r\n                            <thead>\r\n                                <th>#</th>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Duration</th>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.tracklist.map((element, index) => {\r\n                                return(<tr>\r\n                                    <td>{index+1}</td>\r\n                                    <td>{element[0]}</td>\r\n                                    <td>{element[1]}</td>\r\n                                    <td>{element[2]}</td>\r\n                                    <td>{element[3]}</td>\r\n                                </tr>)\r\n                            })\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                    </div>\r\n                :\r\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\r\n                }\r\n                </div>\r\n                <div className=\"col-6 \">\r\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Nextup;","import React from 'react';\r\nimport MyGroups from './mygroups/mygroups.js';\r\nimport Nextup from './nextup/nextup.js';\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            playbackCommandtrigger: false,\r\n            changePlaybackTriggerNext: false,\r\n            changePlaybackTriggerPrevious: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n            playlistDisplay: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.props.user !== this.state.user && this.props.user !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTriggerNext)\r\n        {\r\n            console.log('next song');\r\n            this.changePlaybackNext();\r\n            \r\n        }\r\n        if(this.state.changePlaybackTriggerPrevious)\r\n        {   \r\n            console.log('previous song');\r\n            this.changePlaybackPrevious();\r\n        }\r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action)\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackNext = () => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/next\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerNext: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackPrevious = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/previous\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerPrevious: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    getSelectedPlaylist = (playlist) => {\r\n        console.log(\"Got selected playlist in dashboard: \", playlist);\r\n        this.setState({playlistDisplay: playlist});\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 border\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h2>My groups</h2>\r\n                        <MyGroups user={this.state.user} getplaylist={this.getSelectedPlaylist}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying border\">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <div>    \r\n                                    <h2>Now Playing: [Nothing is playing]</h2>\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                </div>\r\n                            : \r\n                                <div>\r\n                                    <h2>Now Playing:</h2>\r\n                                    <h5>{this.state.item.name}</h5>\r\n                                    <h6>Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6>Album: {this.state.item.album.name}</h6>\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerPrevious: true})}>Previous</button>\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                    \r\n                        <Nextup playlist={this.state.playlistDisplay} />\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3 border\">\r\n                    <h2>Chat</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport TopHeader from './topheader/topheader';\nimport Dashboard from './dashboard/dashboard';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      loggedIn: false,\n      userState: null,\n    };\n  };\n\n  componentDidMount(){\n    console.log(\"fetching getUser...\");\n    fetch(\"/getUser\")\n    .then(res => res.json()\n    .then(res => {\n      if(res !== this.state.userState)\n      {\n        console.log(\"Fetched!\");\n        this.setState({userState: res});\n      }\n    }));\n  }\n\n  render()\n  {  \n    return (\n      <div className=\"App\">\n\n          <TopHeader user={this.state.userState}/>\n        <div className=\"container-fluid\">  \n          <Dashboard user={this.state.userState}/>\n        </div>\n        \n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}