{"version":3,"sources":["hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/chat/chat.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","state","user","userid","devicename","deviceactive","this","console","log","fetch","then","res","json","setState","getID","Navbar","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","MyGroups","handleSelectedPlaylist","val","name","getplaylist","handleInputChange","event","target","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","resp","getgroups","handleAddGroupSubmit","newGroup","newgroup","userID","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","groups","selectedGroup","updatedPlaylist","playlistToMyGroups","map","element","i","playlists","length","groupname","playlist","index","tracklist","newgroups","getAllgroups","Accordion","defaultActiveKey","group","Card","as","Header","eventKey","Body","members","member","onSubmit","role","Group","Control","onChange","ToggleButtonGroup","vertical","ToggleButton","Chat","useState","setGroup","author","setAuthor","messageCollection","setMessages","useEffect","chatSocket","WebSocket","onopen","onmessage","msg","parse","data","messages","setupWS","message","writtenmessage","class","required","Nextup","getTrackInfos","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","searchSubmit","searchedTrack","items","foundTracks","addSongtoMongo","song","uriTrack","playlistname","getUpdatedPlaylist","nextup","urilist","style","Table","striped","border","div","onClick","bind","Dashboard","getMusicInfo","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","playSong","songuri","deviceID","iteratorPlaylist","playlistDisplay","setTimeout","changePlaybackTriggerNext","changePlaybackTriggerPrevious","changePlaybackNext","alert","changePlaybackPrevious","getSelectedPlaylist","getSelectedGroup","addedSongtoPlaylist","playListCommandtrigger","changePlayback","getGroup","disabled","src","images","url","alt","App","loggedin","userState","getUserToggled","statusCode","displayname","catch","err","deviceid","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f020c70e.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: '',\r\n            userid: null,\r\n            devicename: null, \r\n            deviceactive: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.userid === null)\r\n        {\r\n            console.log(\"Requesting client id...\");\r\n            fetch(\"/authorize\")\r\n            .then(res => res.json()\r\n            .then(res => {\r\n                console.log(\"Fetched client ID:\", res.userid);\r\n                this.setState({userid: res.userid});\r\n                console.log(\"client id:\", this.state.userid);\r\n                this.props.getID(res.userid);\r\n            }));\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n\r\n        if(this.state.devicename !== this.props.devicename && this.props.devicename !== null)\r\n        {\r\n            this.setState({devicename: this.props.devicename, deviceactive: `${this.props.deviceactive}`})\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar className=\"topheader\" bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\">Spotify Party</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    </Nav>\r\n                    { (this.state.user === '') ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link href={`/login/${this.state.userid}`}>Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav className=\"ml-auto\">\r\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\r\n\r\n                            <NavDropdown.Item>Hello, {this.state.user}</NavDropdown.Item>\r\n\r\n                            <NavDropdown.Item>Device name: {this.state.devicename}</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"/\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    }\r\n                    \r\n\r\n                    <Form inline className=\"searchButton\">\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button  variant=\"outline-success\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport './mygroups.css';\r\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\r\n\r\nclass MyGroups extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            userID: null,\r\n            loggedIn: false,\r\n            getgroups: false,\r\n            groups: null,\r\n            newPlaylist: '',\r\n            newPlaylistGroup: '',\r\n            newGroup: '',\r\n            newMember: '',\r\n            newMemberGroup: '',\r\n            selectedGroup: null,\r\n            updatedPlaylist: null,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.user !== this.state.user && this.props.user !== '' && this.state.userID !== this.props.userid) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true, userID: this.props.userid});\r\n            \r\n        }\r\n\r\n        if(this.state.selectedGroup !== this.props.selectedGroup)\r\n        {\r\n            this.setState({selectedGroup: this.props.selectedGroup});\r\n        }\r\n\r\n        if(this.state.groups !== null && this.state.selectedGroup !== null && this.props.playlistToMyGroups !== this.state.updatedPlaylist)\r\n        {\r\n            var groups = this.state.groups;\r\n            groups.map((element, i) => {\r\n                if(element.playlists.length && element.groupname === this.state.selectedGroup)\r\n                {\r\n                    var playlists = element.playlists;\r\n                    playlists.map((playlist, index) => {\r\n                        if(playlist.name === this.props.playlistToMyGroups.name)\r\n                        {\r\n                            console.log(\"Old tracklist:\", playlist.tracklist);\r\n                            console.log(\"to update with:\", this.props.playlistToMyGroups.tracklist);\r\n                            if(playlist.tracklist !== this.props.playlistToMyGroups.tracklist)\r\n                            {\r\n                                \r\n                                var newgroups = groups;\r\n                                newgroups[i].playlists[index].tracklist = this.props.playlistToMyGroups.tracklist;\r\n                                this.setState({groups: newgroups, updatedPlaylist: this.props.playlistToMyGroups});\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }    \r\n\r\n        if(this.state.loggedIn === true && this.state.getgroups === true)\r\n        {\r\n            this.getAllgroups();\r\n        }\r\n    }\r\n\r\n    getAllgroups() {\r\n        fetch(\"/getallgroups\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n        })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Res is: \", res);\r\n            this.setState({groups: res, getgroups: false})\r\n            \r\n        }));\r\n    }\r\n\r\n    handleSelectedPlaylist = (val) => {\r\n        console.log(\"Selected playlist in MyGroups: \", `${val[0].name} from group: ${val[1]}`);\r\n        this.props.getplaylist(val[0], val[1]);\r\n        //this.props.getGroup(val[1]);\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    handleAddPlaylistSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newPlaylist.value !== '')\r\n        {\r\n            fetch('/createplaylist', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                console.log(\"addplaylist response:\", resp);\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newPlaylist: '', newPlaylistGroup: '', getgroups: true});\r\n                    console.log(this.state.newPlaylist);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddGroupSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newGroup.value !== '')\r\n        {\r\n            fetch('/creategroup', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newgroup: `${this.state.newGroup}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newGroup: '', getgroups: true});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddMemberSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newMember.value !== '')\r\n        {\r\n            fetch('/addmember', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newMember: '', newMemberGroup: '', getgroups: true});\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"fullsize\">\r\n                { this.state.user !== null ?\r\n                    <div className=\"fullsize\">\r\n\r\n                        { this.state.groups !== null ?\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {   this.state.groups.map((group, index) =>\r\n                                    {\r\n                                        return (\r\n                                        <Card>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index}>\r\n                                                {group.groupname}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <h4>Members</h4>\r\n                                                    <ul>\r\n                                                        {group.members.map((member, i) => {\r\n                                                            return(<h6>{member}</h6>)\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\r\n                                                            Add Member\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={3}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                                    <h4 className=\"btnAddPlaylist\">Playlists</h4>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\r\n                                                        {group.playlists.map((playlist, i) => {\r\n                                                            return(\r\n            \r\n                                                                <ToggleButton value={[this.state.groups[index].playlists[i],this.state.groups[index].groupname]} >{playlist.name}</ToggleButton>\r\n                                                                \r\n                                                            )\r\n                                                        })\r\n                                                        }\r\n                                                    </ToggleButtonGroup>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\r\n                                                            Create Playlist\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={2}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Create\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                              </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                        \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Accordion> \r\n                        :\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        }\r\n\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\r\n                                Create Group\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey={1}>\r\n                                <Card.Body>\r\n                                    <form onSubmit={this.handleAddGroupSubmit}>\r\n                                        <Form>\r\n                                            <Form.Group>\r\n                                            <Form.Control onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\r\n                                            </Form.Group>\r\n                                            <Button variant=\"success\" type=\"submit\">\r\n                                                Create\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </form>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                            \r\n                    </div>\r\n                    :\r\n                    <h4>Not logged in</h4>\r\n                }\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGroups;","import React, { useState, useEffect } from 'react';\r\n\r\nimport './chat.css';\r\n\r\nfunction Chat(props) {\r\n\r\n    const [selectedGroup, setGroup] = useState( null );\r\n    const [author, setAuthor] = useState( '' );\r\n    const [messageCollection, setMessages] = useState([]);\r\n   \r\n    const [err, setErr] = useState(null); \r\n    \r\n    const setupWS = () => {\r\n        var chatSocket = new WebSocket(\"ws://localhost:3001\");\r\n\r\n        chatSocket.onopen = () => {\r\n            console.log(\"WS client connected\");\r\n\r\n            chatSocket.onmessage = (msg) => {\r\n                console.log(\"WS client set message:\", JSON.parse(msg.data));\r\n                var updatedMessages = JSON.parse(msg.data);\r\n                updatedMessages.map((group, index) => {\r\n                    if(group.groupname === props.group)\r\n                    {\r\n                        setMessages(group.messages);\r\n                    }\r\n                })\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.group !== '')\r\n        {\r\n            setAuthor(props.author);\r\n            setGroup(props.group);\r\n        }\r\n    }, [props.group]);\r\n\r\n    useEffect(() => {\r\n        setupWS();\r\n       \r\n        // fetch(\"/allgroupmessages\", {\r\n        //     method:'POST', \r\n        //     headers: { 'Content-Type': 'application/json' },\r\n        //     body: JSON.stringify({group: props.group}), \r\n        // })\r\n        // .then((res) => res.json())\r\n        // .then((res) => {\r\n        //     if(!res.success)\r\n        //     {\r\n        //         console.log(\"No group registered\");\r\n        //         return;\r\n        //     }\r\n        //     else{\r\n        //     console.log(\"Setting messageCollection\", res.data.messages);\r\n        //     setMessages(res.data.messages);\r\n        //     }\r\n        // })\r\n        // .catch((err) => setErr(err));\r\n    }, []);\r\n\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        \r\n        var group = event.target[0].value;\r\n        var author = event.target[1].value;\r\n        var writtenmessage = event.target[1].value;\r\n\r\n        fetch(\"/sendchatmessage\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({group: group, author: author, writtenmessage: writtenmessage}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Done.\", res);\r\n        }));\r\n    }\r\n\r\n    return(\r\n        <div className=\"chat\">\r\n            { props.group === \"\" ? \r\n            <div>\r\n                <h2>Group chat</h2>\r\n                <h2>[No group selected]</h2>\r\n            </div>\r\n            :\r\n            <div>\r\n                <h2>Group chat: {selectedGroup}</h2>\r\n                <div id=\"chatbox\" className=\"row justify-content-center p-3\">    \r\n                    <table className=\"tablechat\">\r\n                        <thead>\r\n                            <th className=\"user\"></th>\r\n                            <th className=\"message\"></th>\r\n                        </thead>\r\n                    \r\n                        <tbody>\r\n                        {messageCollection.map((message, index) => \r\n                            {\r\n                            return(\r\n                                <tr>\r\n                                    <td className=\"user\">{message[1]} said: </td>\r\n                                    <td className=\"message\">{message[0]}</td>\r\n                                </tr>\r\n                            )\r\n                            }\r\n                        )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <form onSubmit={sendMessage} class=\"form-inline justify-content-left p-3\">\r\n                        <div class=\"form-group mb-2\">\r\n                        <input className=\"form-control\" name=\"group\" value={selectedGroup} type=\"hidden\"/>\r\n                        <input className=\"form-control\" name=\"author\" value={author} type=\"hidden\"/>\r\n                            <input className=\"form-control\" name=\"writtenMessage\" type=\"text\" placeholder=\"Write a message...\" required/>\r\n                        </div>\r\n                        <button className=\"btn btn-success mb-2\" type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>    \r\n            </div>\r\n            }\r\n            \r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Chat;","import React, { useLayoutEffect } from 'react';\r\nimport './nextup.css';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass Nextup extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            userID: null,\r\n            playlist: null,\r\n            playlistname: null,\r\n            tracklist: [[\"\", \"\"]],\r\n            nextup: 0,\r\n            searchedTrack: '',\r\n            foundTracks: [],\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.state.playlist !== this.props.playlist && this.props.playlist !== null && this.props.groups !== this.state.group)\r\n        { \r\n            var urilist = [];\r\n            this.props.playlist.tracklist.map((element,i) => {\r\n                    urilist[i] = element;\r\n            });\r\n            this.setState({playlist: this.props.playlist, playlistname: this.props.playlist.name, group: this.props.group});\r\n            if(urilist.length > 0)\r\n            {\r\n                this.getTrackInfos(urilist);\r\n            }\r\n            else{\r\n                this.setState({tracklist: [[\"\", \"\"]]});\r\n            }\r\n        }\r\n\r\n        if(this.props.user !== '' && this.state.userID !== this.props.userid)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.nextup !== this.props.nextup)\r\n        {\r\n            if(this.props.nextup < this.state.tracklist.length)\r\n            {\r\n                this.setState({nextup: this.props.nextup});\r\n            }\r\n\r\n            if(this.state.tracklist.length === 0)\r\n            {\r\n                this.setState({nextup: 0});\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n\r\n    getTrackInfos = (tracklist) => {\r\n        fetch(\"/gettracksinfo\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({tracks: tracklist, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetched tracks info:\", res);\r\n            var tracks = [];\r\n            res.map((track, i) => {\r\n                tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\r\n            });\r\n            console.log(\"Tracks:\", tracks);\r\n            this.setState({tracklist: tracks});\r\n        }));\r\n        \r\n    } \r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.searchedTrack.value !== '')\r\n        {\r\n            fetch('/searchtracks', {\r\n                method:'POST',\r\n                body: JSON.stringify({searchedTrack: `${this.state.searchedTrack}`, userid: this.state.userID}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    console.log(\"Returned tracks:\", resp.items);\r\n                    var tracks = [];\r\n                    resp.items.map((track, index) => {\r\n                        tracks[index] = [track.name, track.artists[0].name, track.album.name, track.uri];\r\n                    })\r\n                    this.setState({foundTracks: tracks, searchedTrack: ''});\r\n                    console.log(\"tracks: \", this.state.foundTracks);\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    addSongtoMongo = (song) => {\r\n        console.log(song.target.value);\r\n        var uri = song.target.value.split(':');\r\n        fetch(\"/addtracktoplaylist\", {\r\n            method:'POST',\r\n            body: JSON.stringify({uriTrack: `${uri[2]}`,playlist: `${this.state.playlistname}`, group: `${this.state.group}`, userid: this.state.userID}),\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(res => res.json())\r\n        .then(resp => {\r\n            console.log(\"Playlists\", resp);\r\n            this.setState({foundTracks: []});\r\n            this.props.getUpdatedPlaylist(resp, this.state.group);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row nextupAddsong border\" style={{}}>\r\n                <div className=\"col-6 border-right\">\r\n                { this.state.playlist !== null ?\r\n                    <div className=\"nextup\">\r\n                        <h3>Next up: {this.state.tracklist[this.state.nextup][0]} - {this.state.tracklist[this.state.nextup][1]}</h3>\r\n                        <label>Playlist name: {this.state.playlistname} Group: {this.state.group}</label>\r\n                        <Table striped border>\r\n                            <thead>\r\n                                <th>#</th>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Duration</th>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.tracklist.map((element, index) => {\r\n                                return(<tr>\r\n                                    <td>{index+1}</td>\r\n                                    <td>{element[0]}</td>\r\n                                    <td>{element[1]}</td>\r\n                                    <td>{element[2]}</td>\r\n                                    <td>{element[3]}</td>\r\n                                </tr>)\r\n                            })\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                    </div>\r\n                :\r\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\r\n                }\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\r\n                    { this.state.playlist !== null ?\r\n                    <div>\r\n                        <form class=\"form-inline justify-content-center\" onSubmit={this.searchSubmit}>\r\n                            <div class=\"form-group mb-2\">\r\n                                <input onChange={this.handleInputChange} className=\"form-control\" name=\"searchedTrack\" value={this.state.searchedTrack} type=\"text\" placeholder=\"Search song...\"/>\r\n                            </div>\r\n                            <button className=\"btn btn-success mb-2\" type=\"submit\">Search</button>\r\n                        </form>\r\n                        <Table striped border>\r\n                            <thead>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Select</th>\r\n                            </thead>\r\n                            { this.state.foundTracks.length > 0 ?\r\n                                <tbody>\r\n                                {this.state.foundTracks.map((element, index) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{element[0]}</td>\r\n                                            <td>{element[1]}</td>\r\n                                            <td>{element[2]}</td>\r\n                                            <td>\r\n                                                <button onClick={this.addSongtoMongo.bind(this)} value={element[3]} className=\"btn btn-success\">Add</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                                }   \r\n                                </tbody>\r\n                                :\r\n                                <tbody>\r\n\r\n                                </tbody>\r\n                            }\r\n                            \r\n                        </Table>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Nextup;","import React from 'react';\r\nimport MyGroups from './mygroups/mygroups.js';\r\nimport Chat from './chat/chat.js'\r\nimport Nextup from './nextup/nextup.js';\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: '',\r\n            deviceID: null,\r\n            userID: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            playbackCommandtrigger: false,\r\n            playListCommandtrigger: false,\r\n            changePlaybackTriggerNext: false,\r\n            changePlaybackTriggerPrevious: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n            playlistDisplay: null,\r\n            playlistToMyGroups: null,\r\n            iteratorPlaylist:0,\r\n            group: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.state.userID !== null && this.props.user !== this.state.user && this.props.user !== '' && this.props.deviceID !== this.state.deviceID && this.props.deviceID !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, deviceID: this.props.deviceID});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.props.userid !== null && this.props.userid !== this.state.userID)\r\n        {\r\n            this.setState({userID: this.props.userid});\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTriggerNext)\r\n        {\r\n            \r\n            var i = this.state.iteratorPlaylist;\r\n            console.log(\"size:\", this.state.playlistDisplay.tracklist.length);\r\n            console.log(\"iterator: \", i);\r\n            console.log('next song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n            \r\n        }\r\n        if(this.state.changePlaybackTriggerPrevious)\r\n        {   \r\n            if(this.state.iteratorPlaylist > 0)\r\n            {\r\n                var i = this.state.iteratorPlaylist -1;\r\n            }\r\n            else\r\n            {\r\n                var i = 0;\r\n            }\r\n            console.log('previous song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n        }\r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\", {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({userid: this.state.userID}),\r\n          })\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false,\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    playSong = (songuri) => {\r\n        fetch(\"/playsong\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`, userid: this.state.userID}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(res);\r\n            if((this.state.iteratorPlaylist) < this.state.playlistDisplay.tracklist.length)\r\n            {\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    if(this.state.changePlaybackTriggerNext)\r\n                    {\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerNext: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                    else if(this.state.changePlaybackTriggerPrevious){\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerPrevious: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n            else{\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true, changePlaybackTriggerNext: false, iteratorPlaylist: 0});\r\n                    console.log(\"Reset iterator: \", this.state.iteratorPlaylist);\r\n                \r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n           \r\n        }));\r\n        \r\n    } \r\n\r\n    changePlaybackNext = () => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/next\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerNext: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackPrevious = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/previous\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerPrevious: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    getSelectedPlaylist = (playlist, group) => {\r\n        console.log(\"Got selected playlist in dashboard: \", `${playlist.tracklist} from group: ${group}`);\r\n        this.setState({playlistDisplay: playlist, iteratorPlaylist: 0, group: group});\r\n    }\r\n\r\n    getSelectedGroup = (group) => {\r\n        console.log(\"Got selected group in dashboard: \", group);\r\n        this.setState({group: group});\r\n    }\r\n\r\n    addedSongtoPlaylist = (newplaylist, group) => {\r\n        console.log(\"Got updated playlist in dashboard: \", `${newplaylist} from group: ${group}`);\r\n        this.setState({playlistDisplay: newplaylist, playlistToMyGroups: newplaylist, group: group});\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div id=\"mainrow\" className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 border-right border-top\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h2>My groups</h2>\r\n                        <MyGroups userid={this.state.userID} user={this.state.user} getplaylist={this.getSelectedPlaylist} getGroup={this.getSelectedGroup} selectedGroup={this.state.group} playlistToMyGroups={this.state.playlistToMyGroups}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying border-bottom border-top\">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined ) ?\r\n                                <div>    \r\n                                    <h2>Now Playing: [Nothing is playing]</h2>\r\n                                    { this.state.user !== '' ?\r\n                                        <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    :\r\n                                        <div></div>\r\n                                    }\r\n                                    \r\n                                    { this.state.playlistDisplay !== null ?\r\n                                        <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Play Next</button>\r\n                                    :\r\n                                        <div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            : \r\n                                <div>\r\n                                    <h2>Now Playing:</h2>\r\n                                    <h5>{this.state.item.name}</h5>\r\n                                    <h6>Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6>Album: {this.state.item.album.name}</h6>\r\n                                    \r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    { this.state.playlistDisplay !== null && this.state.iteratorPlaylist < this.state.playlistDisplay.tracklist.length ?\r\n                                        <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>\r\n                                    :\r\n                                        <button className=\"btn btn-primary\" disabled>Next</button>\r\n                                    }\r\n                                    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <Nextup userid={this.state.userID} playlist={this.state.playlistDisplay} getUpdatedPlaylist={this.addedSongtoPlaylist} group={this.state.group} nextup={this.state.iteratorPlaylist}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3 border-left border-top\">\r\n                    <Chat group={this.state.group} author={this.state.user}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport TopHeader from './topheader/topheader';\r\nimport Dashboard from './dashboard/dashboard';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      loggedin: false,\r\n      userState: '',\r\n      deviceID: null,\r\n      devicename: null,\r\n      deviceactive: false,\r\n      userID: null,\r\n      getUserToggled: false,\r\n    };\r\n  };\r\n\r\n  componentDidMount(){\r\n    if(this.state.loggedin !== true)\r\n    {\r\n      console.log(\"fetching getUser...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!\");\r\n            this.setState({userState: res.displayname, loggedin: true});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    if(this.state.getUserToggled ===  true)\r\n    {\r\n      setTimeout( () => {\r\n        \r\n      \r\n      console.log(\"fetching getUser...\");\r\n      fetch(\"/getUser\", \r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.statusCode === 200)\r\n        {\r\n          if(res.displayname !== this.state.userState)\r\n          {\r\n            console.log(\"Fetched!\");\r\n            this.setState({userState: res.displayname, loggedin: true, getUserToggled: false});\r\n          }\r\n        }\r\n        else{\r\n          console.log(\"Error code: \", res.statusCode);\r\n          if(res.statusCode === \"tryagain\")\r\n          {\r\n            this.setState({getUserToggled: true});\r\n          }\r\n        }\r\n        \r\n      }))\r\n      .catch(err =>{\r\n        console.log(\"Error with GetUser\");\r\n      });\r\n\r\n      }, 500);\r\n    }\r\n\r\n    if(this.state.deviceID === null && this.state.loggedin ===  true)\r\n    {\r\n      fetch(\"/mydevices\", {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({userid: this.state.userID}),\r\n      })\r\n      .then(res => res.json()\r\n      .then(res => {\r\n        if(res.length === 0)\r\n        {\r\n          alert(\"No listening is activated. Open your web browser at open.spotify.com, active your device (play/pause) and reload page.\");\r\n        }\r\n        else{\r\n          console.log(\"Device found: \", res[0]);\r\n          if(res[0].deviceid !== this.state.deviceID)\r\n        {\r\n          this.setState({deviceID: res[0].deviceid, devicename: res[0].devicename, deviceactive: res[0].deviceactive});\r\n        }\r\n        }\r\n        \r\n      }));\r\n    }\r\n  }\r\n\r\n  getID = (id) =>{\r\n    this.setState({userID: id});\r\n    console.log(\"App got client id:\", this.state.userID);\r\n  }\r\n\r\n  render()\r\n  {  \r\n    return (\r\n      <div className=\"App\">\r\n\r\n          <TopHeader user={this.state.userState} getID={this.getID} devicename={this.state.devicename} deviceactive={this.state.deviceactive}/>\r\n        <div className=\"container-fluid\">  \r\n          <Dashboard user={this.state.userState} deviceID={this.state.deviceID} userid={this.state.userID}/>\r\n        </div>\r\n        \r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}