{"version":3,"sources":["hash.js","topheader/topheader.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","state","user","this","setState","Navbar","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","Dashboard","getMusicInfo","console","log","fetch","then","res","json","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","changePlayback","changePlaybackTrigger","setTimeout","alert","loggedIn","onClick","name","artists","album","src","images","url","alt","App","userState","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81e3e357.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        \r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar className=\"topheader\" bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\">Spotify Party</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    </Nav>\r\n                    { this.state.user === null ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link href=\"/login\">Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav className=\"ml-auto\">\r\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\r\n\r\n                            <NavDropdown.Item href=\"#\">Hello, {this.state.user}</NavDropdown.Item>\r\n\r\n                            <NavDropdown.Item href=\"#\">Preferences</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    }\r\n                    \r\n\r\n                    <Form inline className=\"searchButton\">\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button  variant=\"outline-success\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\n\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            playbackCommandtrigger: false,\r\n            changePlaybackTrigger: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.props.user !== this.state.user) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTrigger)\r\n        {\r\n            console.log(\"Command:\", this.state.changePlayback);\r\n            if(this.state.changePlayback === 2)\r\n            {\r\n                console.log('next song');\r\n                this.changePlayback(\"next\");\r\n            }\r\n            else if(this.state.changePlayback === 1)\r\n            {\r\n                console.log('previous song');\r\n                this.changePlayback(\"previous\");\r\n            }\r\n        }   \r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action)\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlayback = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/\"+action)\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTrigger: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 border\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h2>My groups</h2>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying border\">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <div>    \r\n                                    <h2>Now Playing: [Nothing is playing]</h2>\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                </div>\r\n                            : \r\n                                <div>\r\n                                    <h2>Now Playing:</h2>\r\n                                    <h5>{this.state.item.name}</h5>\r\n                                    <h6>Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6>Album: {this.state.item.album.name}</h6>\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTrigger: true, changePlayback: 1})}>Previous</button>\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTrigger: true, changePlayback: 2})}>Next</button>    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div className=\"row nextup border\">\r\n                        <h2>Next up:</h2>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3 border\">\r\n                    <h2>Chat</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport TopHeader from './topheader/topheader';\nimport Dashboard from './dashboard/dashboard';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      loggedIn: false,\n      userState: null,\n    };\n  };\n\n  componentDidMount(){\n    console.log(\"fetching getUser...\");\n    fetch(\"/getUser\")\n    .then(res => res.json()\n    .then(res => {\n      if(res !== this.state.userState)\n      {\n        console.log(\"Fetched!\");\n        this.setState({userState: res});\n      }\n    }));\n  }\n\n  render()\n  {  \n    return (\n      <div className=\"App\">\n\n          <TopHeader user={this.state.userState}/>\n          \n          <Dashboard user={this.state.userState}/>\n          \n        \n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}