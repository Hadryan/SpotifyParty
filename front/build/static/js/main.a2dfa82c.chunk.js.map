{"version":3,"sources":["hash.js","topheader/topheader.js","dashboard/mygroups/mygroups.js","dashboard/nextup/nextup.js","dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","TopHeader","props","state","user","this","setState","Navbar","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","MyGroups","handleSelectedPlaylist","val","getplaylist","getGroup","handleInputChange","event","target","name","value","handleAddPlaylistSubmit","preventDefault","newPlaylist","fetch","method","body","JSON","stringify","newplaylist","relatedgroup","newPlaylistGroup","headers","then","res","json","resp","console","log","getgroups","handleAddGroupSubmit","newGroup","newgroup","handleAddMemberSubmit","newMember","newMemberGroup","loggedIn","groups","updatedPlaylist","map","element","i","playlists","length","playlist","index","tracklist","newgroups","getAllgroups","Accordion","defaultActiveKey","group","Card","as","Header","eventKey","groupname","Body","members","member","onSubmit","role","Group","Control","onChange","ToggleButtonGroup","vertical","ToggleButton","Nextup","getTrackInfos","tracks","track","artists","album","Math","floor","duration_ms","toFixed","uri","searchSubmit","searchedTrack","items","foundTracks","addSongtoMongo","song","uriTrack","playlistname","getUpdatedPlaylist","nextup","urilist","style","Table","striped","border","div","class","onClick","bind","Dashboard","getMusicInfo","undefined","refreshToggled","playback","is_playing","playpausePlayback","action","playbackCommandtrigger","playSong","songuri","deviceID","iteratorPlaylist","playlistDisplay","setTimeout","changePlaybackTriggerNext","changePlaybackTriggerPrevious","changePlaybackNext","alert","changePlaybackPrevious","getSelectedPlaylist","getSelectedGroup","addedSongtoPlaylist","playListCommandtrigger","changePlayback","src","images","url","alt","App","userState","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"maAAaA,OAAOC,SAASC,KACxBC,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACtB,GAAIA,EAAM,CACV,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE7C,OAAOF,IACR,IACPN,OAAOC,SAASC,KAAO,G,MAERA,ICqEAQ,E,kDA5DX,WAAYC,GAAO,IAAD,8BACd,gBAEKC,MAAQ,CACTC,KAAM,MAJI,E,8GAcXC,KAAKH,MAAME,OAASC,KAAKF,MAAMC,MACjCC,KAAKC,SAAS,CAACF,KAAMC,KAAKH,MAAME,S,+BAMjC,OAEI,kBAACG,EAAA,EAAD,CAAQC,UAAU,YAAYC,GAAG,QAAQC,OAAO,MAC5C,kBAACH,EAAA,EAAOI,MAAR,CAAcH,UAAU,YAAYI,KAAK,KAAzC,iBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKT,UAAU,WACX,kBAACS,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,SAEkB,OAApBP,KAAKF,MAAMC,KACb,kBAACa,EAAA,EAAD,CAAKT,UAAU,oBACX,kBAACS,EAAA,EAAIC,KAAL,CAAUN,KAAK,UAAf,uBAGJ,kBAACK,EAAA,EAAD,CAAKT,UAAU,WACX,kBAACW,EAAA,EAAD,CAAaX,UAAU,eAAeY,MAAM,aAAaJ,GAAG,sBAExD,kBAACG,EAAA,EAAYE,KAAb,CAAkBT,KAAK,KAAvB,UAAmCP,KAAKF,MAAMC,MAE9C,kBAACe,EAAA,EAAYE,KAAb,CAAkBT,KAAK,KAAvB,eACA,kBAACO,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBT,KAAK,KAAvB,aAMR,kBAACW,EAAA,EAAD,CAAMC,QAAM,EAAChB,UAAU,gBACvB,kBAACiB,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASnB,UAAU,YACxD,kBAACoB,EAAA,EAAD,CAASC,QAAQ,mBAAjB,iB,GArDIC,IAAMC,W,gDCyPfC,E,kDAtQX,WAAY9B,GAAO,IAAD,8BACd,cAAMA,IA4DV+B,uBAAyB,SAACC,GACtB,EAAKhC,MAAMiC,YAAYD,EAAI,IAC3B,EAAKhC,MAAMkC,SAASF,EAAI,KA/DV,EAkElBG,kBAAoB,SAACC,GACjB,EAAKhC,SAAL,eACKgC,EAAMC,OAAOC,KAAO,CAACF,EAAMC,OAAOE,UApEzB,EAwElBC,wBAA0B,SAACJ,GACvBA,EAAMK,iBACgC,KAAnCL,EAAMC,OAAOK,YAAYH,OAExBI,MAAM,kBACN,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,YAAY,GAAD,OAAK,EAAK/C,MAAMyC,aAAeO,aAAa,GAAD,OAAKb,EAAMC,OAAOa,iBAAiBX,SAC/GY,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAK,SAAAG,GACFC,QAAQC,IAAI,wBAAyBF,GACzB,OAATA,IAEC,EAAKnD,SAAS,CAACsC,YAAa,GAAIQ,iBAAkB,GAAIQ,WAAW,IACjEF,QAAQC,IAAI,EAAKxD,MAAMyC,kBAvFrB,EA6FlBiB,qBAAuB,SAACvB,GACpBA,EAAMK,iBAC6B,KAAhCL,EAAMC,OAAOuB,SAASrB,OAErBI,MAAM,eACN,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACc,SAAS,GAAD,OAAK,EAAK5D,MAAM2D,YAC9CT,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAK,SAAAG,GACU,OAATA,GAEC,EAAKnD,SAAS,CAACwD,SAAU,GAAIF,WAAW,QA1GtC,EAgHlBI,sBAAwB,SAAC1B,GACrBA,EAAMK,iBAC8B,KAAjCL,EAAMC,OAAO0B,UAAUxB,OAEtBI,MAAM,aACN,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACgB,UAAU,GAAD,OAAK,EAAK9D,MAAM8D,WAAad,aAAa,GAAD,OAAKb,EAAMC,OAAO2B,eAAezB,SACzGY,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAK,SAAAG,GACU,OAATA,GAEC,EAAKnD,SAAS,CAAC2D,UAAW,GAAIC,eAAgB,GAAIN,WAAW,QA3HzE,EAAKzD,MAAQ,CACTC,KAAM,KACN+D,UAAU,EACVP,WAAW,EACXQ,OAAQ,KACRxB,YAAa,GACbQ,iBAAkB,GAClBU,SAAU,GACVG,UAAW,GACXC,eAAgB,IAXN,E,iEAeG,IAAD,OAOhB,GANG7D,KAAKH,MAAME,OAASC,KAAKF,MAAMC,MAA4B,OAApBC,KAAKH,MAAME,MAEjDC,KAAKC,SAAS,CAACF,KAAMC,KAAKH,MAAME,KAAM+D,UAAU,EAAMP,WAAW,IAI5C,OAAtBvD,KAAKF,MAAMiE,QAAkD,OAA/B/D,KAAKH,MAAMmE,gBAC5C,CACI,IAAID,EAAS/D,KAAKF,MAAMiE,OACxBA,EAAOE,KAAI,SAACC,EAASC,GACdD,EAAQE,UAAUC,OAAS,GAEVH,EAAQE,UACdH,KAAI,SAACK,EAAUC,GACrB,GAAGD,EAASnC,OAAS,EAAKtC,MAAMmE,gBAAgB7B,MAEzCmC,EAASE,YAAc,EAAK3E,MAAMmE,gBAAgBQ,UACrD,CACI,IAAIC,EAAYV,EAChBU,EAAUN,GAAGC,UAAUG,GAAOC,UAAY,EAAK3E,MAAMmE,gBAAgBQ,UACrE,EAAKvE,SAAS,CAAC8D,OAAQU,YAS5CzE,KAAKF,MAAMgE,UAA4C,IAAzB9D,KAAKF,MAAMyD,YAExCvD,KAAK0E,iB,qCAIG,IAAD,OACXlC,MAAM,iBACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GACFG,QAAQC,IAAI,WAAYJ,GACxB,EAAKjD,SAAS,CAAC8D,OAAQb,EAAKK,WAAW,Y,+BA4ErC,IAAD,OAEL,OACI,yBAAKpD,UAAU,YACW,OAApBH,KAAKF,MAAMC,KACT,yBAAKI,UAAU,YAEa,OAAtBH,KAAKF,MAAMiE,OACT,kBAACY,EAAA,EAAD,CAAWC,iBAAiB,KACpB5E,KAAKF,MAAMiE,OAAOE,KAAI,SAACY,EAAON,GAE1B,OACA,kBAACO,EAAA,EAAD,KACI,kBAACH,EAAA,EAAUnE,OAAX,CAAkBuE,GAAID,IAAKE,OAAQC,SAAUV,GACxCM,EAAMK,WAEX,kBAACP,EAAA,EAAUjE,SAAX,CAAoBuE,SAAUV,GAC1B,kBAACO,EAAA,EAAKK,KAAN,KACI,uCACA,4BACKN,EAAMO,QAAQnB,KAAI,SAACoB,EAAQlB,GACxB,OAAO,4BAAKkB,OAIpB,kBAACV,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUnE,OAAX,CAAkBuE,GAAIxD,IAAQ0D,SAAU,GAAxC,cAIA,kBAACN,EAAA,EAAUjE,SAAX,CAAoBuE,SAAU,GAC1B,kBAACH,EAAA,EAAKK,KAAN,KACI,0BAAMG,SAAU,EAAK3B,uBACjB,kBAACzC,EAAA,EAAD,CAAMqE,KAAK,QACP,kBAACrE,EAAA,EAAKsE,MAAN,KACI,kBAACtE,EAAA,EAAKuE,QAAN,CAActD,KAAK,iBAAiBd,KAAK,SAASe,MAAO,EAAKtC,MAAMiE,OAAOQ,GAAOW,YAClF,kBAAChE,EAAA,EAAKuE,QAAN,CAAcC,SAAU,EAAK1D,kBAAmBG,KAAK,YAAYd,KAAK,QAAQC,YAAY,cAAcc,MAAO,EAAKtC,MAAM8D,YAE1H,kBAACrC,EAAA,EAAD,CAAQpB,UAAU,iBAAiBqB,QAAQ,UAAUH,KAAK,UAA1D,aASxB,wBAAIlB,UAAU,kBAAd,aACA,yBAAKQ,GAAG,gBACJ,6BAEJ,kBAACgF,EAAA,EAAD,CAAmBtE,KAAK,QAAQc,KAAK,YAAYyD,UAAQ,EAACF,SAAU,EAAK9D,wBACpEiD,EAAMT,UAAUH,KAAI,SAACK,EAAUH,GAC5B,OAEI,kBAAC0B,EAAA,EAAD,CAAczD,MAAO,CAAC,EAAKtC,MAAMiE,OAAOQ,GAAOH,UAAUD,GAAG,EAAKrE,MAAMiE,OAAOQ,GAAOW,YAAcZ,EAASnC,UAMxH,yBAAKxB,GAAG,gBACJ,6BAEJ,kBAACgE,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUnE,OAAX,CAAkBuE,GAAIxD,IAAQ0D,SAAU,GAAxC,mBAIA,kBAACN,EAAA,EAAUjE,SAAX,CAAoBuE,SAAU,GAC1B,kBAACH,EAAA,EAAKK,KAAN,KACI,0BAAMG,SAAU,EAAKjD,yBACjB,kBAACnB,EAAA,EAAD,CAAMqE,KAAK,QACP,kBAACrE,EAAA,EAAKsE,MAAN,KACI,kBAACtE,EAAA,EAAKuE,QAAN,CAActD,KAAK,mBAAmBd,KAAK,SAASe,MAAO,EAAKtC,MAAMiE,OAAOQ,GAAOW,YACpF,kBAAChE,EAAA,EAAKuE,QAAN,CAAcC,SAAU,EAAK1D,kBAAmBG,KAAK,cAAcd,KAAK,OAAOC,YAAY,aAAac,MAAO,EAAKtC,MAAMyC,cAE1H,kBAAChB,EAAA,EAAD,CAAQpB,UAAU,iBAAiBqB,QAAQ,UAAUH,KAAK,UAA1D,uBAkBhD,8BAKJ,kBAACsD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUnE,OAAX,CAAkBuE,GAAID,IAAKE,OAAQC,SAAU,GAA7C,gBAGA,kBAACN,EAAA,EAAUjE,SAAX,CAAoBuE,SAAU,GAC1B,kBAACH,EAAA,EAAKK,KAAN,KACI,0BAAMG,SAAUtF,KAAKwD,sBACjB,kBAACtC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKsE,MAAN,KACA,kBAACtE,EAAA,EAAKuE,QAAN,CAAcC,SAAU1F,KAAKgC,kBAAmBG,KAAK,WAAWd,KAAK,OAAOC,YAAY,aAAac,MAAOpC,KAAKF,MAAM2D,YAEvH,kBAAClC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,gBAWxB,kD,GAhQGI,IAAMC,W,gBC0MdoE,E,kDAxMX,WAAYjG,GAAO,IAAD,8BACd,cAAMA,IA+CVkG,cAAgB,SAACvB,GACbhC,MAAM,iBACN,CACIC,OAAQ,OACRO,QAAS,CAAE,eAAgB,oBAC3BN,KAAMC,KAAKC,UAAU4B,KACtBvB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAClBF,MAAK,SAAAC,GACFG,QAAQC,IAAI,uBAAwBJ,GACpC,IAAI8C,EAAS,GACb9C,EAAIe,KAAI,SAACgC,EAAO9B,GACZ6B,EAAO7B,GAAK,CAAC8B,EAAM9D,KAAM8D,EAAMC,QAAQ,GAAG/D,KAAM8D,EAAME,MAAMhE,KAAhD,UAA0DiE,KAAKC,MAAMJ,EAAMK,YAAY,KAAQC,QAAQ,GAAvG,aAA+GN,EAAMK,YAAY,IAAM,IAAIC,QAAQ,IAAMN,EAAMO,QAE/KnD,QAAQC,IAAI,UAAW0C,GACvB,EAAK/F,SAAS,CAACuE,UAAWwB,WA9DhB,EAmElBhE,kBAAoB,SAACC,GACjB,EAAKhC,SAAL,eACKgC,EAAMC,OAAOC,KAAO,CAACF,EAAMC,OAAOE,UArEzB,EAyElBqE,aAAe,SAACxE,GACZA,EAAMK,iBACkC,KAArCL,EAAMC,OAAOwE,cAActE,OAE1BI,MAAM,gBAAiB,CACnBC,OAAO,OACPC,KAAMC,KAAKC,UAAU,CAAC8D,cAAc,GAAD,OAAK,EAAK5G,MAAM4G,iBACnD1D,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAK,SAAAG,GACF,GAAY,OAATA,EACH,CACIC,QAAQC,IAAI,mBAAoBF,EAAKuD,OACrC,IAAIX,EAAS,GACb5C,EAAKuD,MAAM1C,KAAI,SAACgC,EAAO1B,GACnByB,EAAOzB,GAAS,CAAC0B,EAAM9D,KAAM8D,EAAMC,QAAQ,GAAG/D,KAAM8D,EAAME,MAAMhE,KAAM8D,EAAMO,QAEhF,EAAKvG,SAAS,CAAC2G,YAAaZ,EAAQU,cAAe,KACnDrD,QAAQC,IAAI,WAAY,EAAKxD,MAAM8G,kBA3FjC,EAkGlBC,eAAiB,SAACC,GACdzD,QAAQC,IAAIwD,EAAK5E,OAAOE,OACxB,IAAIoE,EAAMM,EAAK5E,OAAOE,MAAM9C,MAAM,KAClCkD,MAAM,sBAAuB,CACzBC,OAAO,OACPC,KAAMC,KAAKC,UAAU,CAACmE,SAAS,GAAD,OAAKP,EAAI,IAAKlC,SAAS,GAAD,OAAK,EAAKxE,MAAMkH,cAAgBnC,MAAM,GAAD,OAAK,EAAK/E,MAAM+E,SACzG7B,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAK,SAAAG,GACFC,QAAQC,IAAI,YAAaF,GACzB,EAAKnD,SAAS,CAAC2G,YAAa,KAC5B,EAAK/G,MAAMoH,mBAAmB7D,OA3GlC,EAAKtD,MAAQ,CACT+E,MAAO,GACPP,SAAU,KACV0C,aAAc,KACdxC,UAAW,CAAC,CAAC,GAAI,KACjB0C,OAAQ,EACRR,cAAe,GACfE,YAAa,IATH,E,iEAed,GAAG5G,KAAKF,MAAMwE,WAAatE,KAAKH,MAAMyE,UAAoC,OAAxBtE,KAAKH,MAAMyE,SAC7D,CACI,IAAI6C,EAAU,GACdnH,KAAKH,MAAMyE,SAASE,UAAUP,KAAI,SAACC,EAAQC,GACnCgD,EAAQhD,GAAKD,KAErBlE,KAAKC,SAAS,CAACqE,SAAUtE,KAAKH,MAAMyE,SAAU0C,aAAchH,KAAKH,MAAMyE,SAASnC,KAAM0C,MAAO7E,KAAKH,MAAMgF,QACrGsC,EAAQ9C,OAAS,EAEhBrE,KAAK+F,cAAcoB,GAGnBnH,KAAKC,SAAS,CAACuE,UAAW,CAAC,CAAC,GAAI,OAIrCxE,KAAKF,MAAMoH,SAAWlH,KAAKH,MAAMqH,SAE7BlH,KAAKH,MAAMqH,OAASlH,KAAKF,MAAM0E,UAAUH,QAExCrE,KAAKC,SAAS,CAACiH,OAAQlH,KAAKH,MAAMqH,SAGH,IAAhClH,KAAKF,MAAM0E,UAAUH,QAEpBrE,KAAKC,SAAS,CAACiH,OAAQ,O,+BAyEzB,IAAD,OAEL,OACI,yBAAK/G,UAAU,2BAA2BiH,MAAO,IAC7C,yBAAKjH,UAAU,sBACW,OAAxBH,KAAKF,MAAMwE,SACT,yBAAKnE,UAAU,UACX,wCAAcH,KAAKF,MAAM0E,UAAUxE,KAAKF,MAAMoH,QAAQ,GAAtD,MAA6DlH,KAAKF,MAAM0E,UAAUxE,KAAKF,MAAMoH,QAAQ,IACrG,iDAAuBlH,KAAKF,MAAMkH,cAClC,kBAACK,EAAA,EAAD,CAAOC,SAAO,EAACC,QAAM,GACjB,+BACI,iCACA,oCACA,sCACA,qCACA,yCAEJ,+BACCvH,KAAKF,MAAM0E,UAAUP,KAAI,SAACC,EAASK,GAChC,OAAO,4BACH,4BAAKA,EAAM,GACX,4BAAKL,EAAQ,IACb,4BAAKA,EAAQ,IACb,4BAAKA,EAAQ,IACb,4BAAKA,EAAQ,WAS7B,wBAAI/D,UAAU,UAAd,2BAGJ,yBAAKA,UAAU,SACX,wBAAIqH,KAAG,EAACrH,UAAU,UAAlB,wBAC0B,OAAxBH,KAAKF,MAAMwE,SACb,6BACI,0BAAMmD,MAAM,qCAAqCnC,SAAUtF,KAAKyG,cAC5D,yBAAKgB,MAAM,mBACP,2BAAO/B,SAAU1F,KAAKgC,kBAAmB7B,UAAU,eAAegC,KAAK,gBAAgBC,MAAOpC,KAAKF,MAAM4G,cAAerF,KAAK,OAAOC,YAAY,oBAEpJ,4BAAQnB,UAAU,uBAAuBkB,KAAK,UAA9C,WAEJ,kBAACgG,EAAA,EAAD,CAAOC,SAAO,EAACC,QAAM,GACjB,+BACI,oCACA,sCACA,qCACA,uCAEFvH,KAAKF,MAAM8G,YAAYvC,OAAS,EAC9B,+BACCrE,KAAKF,MAAM8G,YAAY3C,KAAI,SAACC,EAASK,GAClC,OACI,4BACI,4BAAKL,EAAQ,IACb,4BAAKA,EAAQ,IACb,4BAAKA,EAAQ,IACb,4BACI,4BAAQwD,QAAS,EAAKb,eAAec,KAAK,GAAOvF,MAAO8B,EAAQ,GAAI/D,UAAU,mBAA9E,aAQhB,kCAQZ,oC,GAjMCsB,IAAMC,WC6SZkG,G,wDA1SX,WAAY/H,GAAO,IAAD,8BACd,gBA8EJgI,aAAe,WACXxE,QAAQC,IAAI,6BACZd,MAAM,gBACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GACFG,QAAQC,IAAI,UAAYJ,GACb,OAARA,QAAuB4E,IAAP5E,IAEfG,QAAQC,IAAI,YACZ,EAAKrD,SAAS,CACVR,KAAMyD,EAAIzD,KACVsI,gBAAgB,EAChBC,SAAU9E,EAAI+E,qBA3FZ,EAkGlBC,kBAAoB,SAACC,GACjB9E,QAAQC,IAAI,+BACZd,MAAM,IAAI2F,GACTlF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GAES,OAARA,IAECG,QAAQC,IAAI,UAAWJ,GACvB,EAAKjD,SAAS,CACVmI,wBAAwB,YA5GtB,EAoHlBC,SAAW,SAACC,GACR9F,MAAM,YACN,CACIC,OAAQ,OACRO,QAAS,CAAE,eAAgB,oBAC3BN,KAAMC,KAAKC,UAAU,CAAC4D,IAAI,GAAD,OAAK8B,GAAWC,SAAS,GAAD,OAAK,EAAKzI,MAAMyI,cAClEtF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAClBF,MAAK,SAAAC,GACFG,QAAQC,IAAIJ,GACR,EAAKpD,MAAM0I,iBAAmB,EAAK,EAAK1I,MAAM2I,gBAAgBjE,UAAUH,QAExEhB,QAAQC,IAAI,yCACZoF,YAAY,WACL,EAAK5I,MAAM6I,0BAEV,EAAK1I,SAAS,CACV8H,gBAAgB,EAChBY,2BAA2B,EAC3BH,iBAAkB,EAAK1I,MAAM0I,iBAAmB,IAGhD,EAAK1I,MAAM8I,+BACf,EAAK3I,SAAS,CACV8H,gBAAgB,EAChBa,+BAA+B,EAC/BJ,iBAAkB,EAAK1I,MAAM0I,iBAAmB,MAGzD,MAGHE,YAAY,WACR,EAAKzI,SAAS,CAAC8H,gBAAgB,EAAMY,2BAA2B,EAAOH,iBAAkB,IACzFnF,QAAQC,IAAI,mBAAoB,EAAKxD,MAAM0I,oBAE5C,YAvJG,EA8JlBK,mBAAqB,WACjBxF,QAAQC,IAAI,wBACZd,MAAM,SACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GAES,OAARA,GAECG,QAAQC,IAAI,aAAcJ,GAC1B,EAAKjD,SAAS,CACV0I,2BAA2B,IAE/BtF,QAAQC,IAAI,yCACZoF,YAAY,WACR,EAAKzI,SAAS,CAAC8H,gBAAgB,MAChC,MAIHe,MAAM,6BAjLA,EAwLlBC,uBAAyB,SAACZ,GACtB9E,QAAQC,IAAI,wBACZd,MAAM,aACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GAES,OAARA,GAECG,QAAQC,IAAI,aAAcJ,GAC1B,EAAKjD,SAAS,CACV2I,+BAA+B,IAEnCvF,QAAQC,IAAI,yCACZoF,YAAY,WACR,EAAKzI,SAAS,CAAC8H,gBAAgB,MAChC,MAIHe,MAAM,6BA3MA,EAkNlBE,oBAAsB,SAAC1E,GACnBjB,QAAQC,IAAI,uCAAwCgB,EAASnC,MAC7D,EAAKlC,SAAS,CAACwI,gBAAiBnE,EAAUkE,iBAAkB,KApN9C,EAuNlBS,iBAAmB,SAACpE,GAChBxB,QAAQC,IAAI,oCAAqCuB,GACjD,EAAK5E,SAAS,CAAC4E,MAAOA,KAzNR,EA4NlBqE,oBAAsB,SAACrG,GACnBQ,QAAQC,IAAI,sCAAuCT,GACnD,EAAK5C,SAAS,CAACwI,gBAAiB5F,KA5NhC,EAAK/C,MAAQ,CACTC,KAAM,KACNwI,SAAU,KACVzE,UAAU,EACVrE,KAAM,KACNsI,gBAAgB,EAChBK,wBAAwB,EACxBe,wBAAwB,EACxBR,2BAA2B,EAC3BC,+BAA+B,EAC/BQ,eAAgB,KAChBpB,SAAU,KACVS,gBAAiB,KACjBD,iBAAiB,EACjB3D,MAAO,IAhBG,E,8GAoDd,GA3BG7E,KAAKH,MAAME,OAASC,KAAKF,MAAMC,MAA4B,OAApBC,KAAKH,MAAME,MAAiBC,KAAKH,MAAM0I,WAAavI,KAAKF,MAAMyI,UAAoC,OAAxBvI,KAAKH,MAAM0I,WAE5HvI,KAAKC,SAAS,CAACF,KAAMC,KAAKH,MAAME,KAAM+D,UAAU,EAAMyE,SAAUvI,KAAKH,MAAM0I,WAC3EvI,KAAK6H,gBAGN7H,KAAKF,MAAMiI,iBAEV1E,QAAQC,IAAI,aACZtD,KAAK6H,gBAGN7H,KAAKF,MAAMsI,yBAEV/E,QAAQC,IAAI,yBACe,IAAxBtD,KAAKF,MAAMkI,UAEV3E,QAAQC,IAAI,QACZtD,KAAKkI,kBAAkB,UAIvB7E,QAAQC,IAAI,SACZtD,KAAKkI,kBAAkB,WAI5BlI,KAAKF,MAAM6I,0BACd,CAEI,IAAIxE,EAAInE,KAAKF,MAAM0I,iBACnBnF,QAAQC,IAAI,QAAStD,KAAKF,MAAM2I,gBAAgBjE,UAAUH,QAC1DhB,QAAQC,IAAI,aAAca,GAC1Bd,QAAQC,IAAI,cAActD,KAAKF,MAAM2I,gBAAgBjE,UAAUL,IAE/DnE,KAAKqI,SAASrI,KAAKF,MAAM2I,gBAAgBjE,UAAUL,IAGvD,GAAGnE,KAAKF,MAAM8I,8BACd,CACI,GAAG5I,KAAKF,MAAM0I,iBAAmB,EAEzBrE,EAAInE,KAAKF,MAAM0I,iBAAkB,OAIjCrE,EAAI,EAEZd,QAAQC,IAAI,kBAAkBtD,KAAKF,MAAM2I,gBAAgBjE,UAAUL,IAEnEnE,KAAKqI,SAASrI,KAAKF,MAAM2I,gBAAgBjE,UAAUL,O,+BAsJlD,IAAD,OAEJ,OACI,yBAAKxD,GAAG,UAAUR,UAAU,OACxB,yBAAKQ,GAAG,WAAWR,UAAU,iCACzB,yBAAKA,UAAU,8BACX,yCACA,kBAAC,EAAD,CAAUJ,KAAMC,KAAKF,MAAMC,KAAM+B,YAAa9B,KAAKgJ,oBAAqBjH,SAAU/B,KAAKiJ,iBAAkBjF,gBAAiBhE,KAAKF,MAAM2I,oBAI7I,yBAAKtI,UAAU,SACX,yBAAKA,UAAU,2CACX,yBAAKA,UAAU,SACY,OAApBH,KAAKF,MAAML,WAAqCqI,IAApB9H,KAAKF,MAAML,KACtC,6BACI,iEACA,4BAAQU,UAAU,kBAAkBuH,QAAS,kBAAM,EAAKzH,SAAS,CAAC8H,gBAAgB,MAAlF,WACiC,OAA/B/H,KAAKF,MAAM2I,gBACT,4BAAQtI,UAAU,kBAAkBuH,QAAS,kBAAM,EAAKzH,SAAS,CAAC0I,2BAA2B,MAA7F,aAEA,+BAKR,6BACI,4CACA,4BAAK3I,KAAKF,MAAML,KAAK0C,MACrB,uCAAanC,KAAKF,MAAML,KAAKyG,QAAQ,GAAG/D,MACxC,sCAAYnC,KAAKF,MAAML,KAAK0G,MAAMhE,MAElC,4BAAQhC,UAAU,kBAAkBuH,QAAS,kBAAM,EAAKzH,SAAS,CAAC8H,gBAAgB,MAAlF,WACE/H,KAAKF,MAAMkI,SACT,4BAAQ7H,UAAU,iBAAiBuH,QAAS,kBAAM,EAAKzH,SAAS,CAACmI,wBAAwB,EAAMJ,UAAU,MAAzG,SAEA,4BAAQ7H,UAAU,kBAAkBuH,QAAS,kBAAM,EAAKzH,SAAS,CAACmI,wBAAwB,EAAMJ,UAAU,MAA1G,QAE6B,OAA/BhI,KAAKF,MAAM2I,gBACb,4BAAQtI,UAAU,kBAAkBuH,QAAS,kBAAM,EAAKzH,SAAS,CAAC0I,2BAA2B,MAA7F,QAEA,gCAMZ,yBAAKxI,UAAU,SACY,OAApBH,KAAKF,MAAML,WAAqCqI,IAApB9H,KAAKF,MAAML,KACtC,6BAEA,6BACI,yBAAK4J,IAAG,UAAKrJ,KAAKF,MAAML,KAAK0G,MAAMmD,OAAO,GAAGC,KAAOC,IAAI,aAQxE,6BACI,kBAAC,EAAD,CAAQlF,SAAUtE,KAAKF,MAAM2I,gBAAiBxB,mBAAoBjH,KAAKkJ,oBAAqBrE,MAAO7E,KAAKF,MAAM+E,MAAOqC,OAAQlH,KAAKF,MAAM0I,qBAIhJ,yBAAK7H,GAAG,OAAOR,UAAU,gCACrB,0C,GArSIsB,IAAMC,YCwDf+H,G,wDAtDb,aAAc,IAAD,8BACX,gBACK3J,MAAQ,CACXgE,UAAU,EACV4F,UAAW,KACXnB,SAAU,MALD,E,gEASO,IAAD,OACjBlF,QAAQC,IAAI,uBACZd,MAAM,YACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GACDA,IAAQ,EAAKpD,MAAM4J,YAEpBrG,QAAQC,IAAI,YACZ,EAAKrD,SAAS,CAACyJ,UAAWxG,a,2CAKX,IAAD,OACS,OAAxBlD,KAAKF,MAAMyI,UAEZ/F,MAAM,cACLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,MAAK,SAAAC,GACDA,IAAQ,EAAKpD,MAAMyI,UAEpB,EAAKtI,SAAS,CAACsI,SAAUrF,Y,+BAS/B,OACE,yBAAK/C,UAAU,OAEX,kBAAC,EAAD,CAAWJ,KAAMC,KAAKF,MAAM4J,YAC9B,yBAAKvJ,UAAU,mBACb,kBAAC,EAAD,CAAWJ,KAAMC,KAAKF,MAAM4J,UAAWnB,SAAUvI,KAAKF,MAAMyI,iB,GA9CpD9G,IAAMC,YCOJiI,QACW,cAA7BzK,OAAOC,SAASyK,UAEe,UAA7B1K,OAAOC,SAASyK,UAEhB1K,OAAOC,SAASyK,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpH,MAAK,SAAAqH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpH,QAAQoH,MAAMA,EAAMC,c","file":"static/js/main.a2dfa82c.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function(initial, item) {\r\n        if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from 'react';\r\nimport { Navbar, Button, Form, FormControl, NavDropdown, Nav } from 'react-bootstrap';\r\nimport './topheader.css';\r\nimport hash from \"../hash\";\r\nimport * as $ from \"jquery\";\r\n\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nconst client_id = process.env.REACT_APP_CLIENT_ID;\r\nconst redirect_uri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-read-email\",\r\n];\r\n\r\n\r\nclass TopHeader extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        \r\n        this.state = {\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        \r\n        if(this.props.user !== this.state.user)\r\n        {this.setState({user: this.props.user});}\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            \r\n            <Navbar className=\"topheader\" bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand className=\"brandLogo\" href=\"/\">Spotify Party</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    </Nav>\r\n                    { this.state.user === null ?\r\n                    <Nav className=\"ml-auto logintag\">\r\n                        <Nav.Link href=\"/login\">Login with Spotify</Nav.Link>\r\n                    </Nav>\r\n                    :\r\n                    <Nav className=\"ml-auto\">\r\n                        <NavDropdown className=\"myaccountTag\" title=\"My Account\" id=\"basic-nav-dropdown\">\r\n\r\n                            <NavDropdown.Item href=\"#\">Hello, {this.state.user}</NavDropdown.Item>\r\n\r\n                            <NavDropdown.Item href=\"#\">Preferences</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#\">Log out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    }\r\n                    \r\n\r\n                    <Form inline className=\"searchButton\">\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button  variant=\"outline-success\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TopHeader;","import React from 'react';\r\nimport './mygroups.css';\r\nimport {Accordion, Card, ToggleButtonGroup, ToggleButton, Form, Button, Collapse} from 'react-bootstrap';\r\n\r\nclass MyGroups extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            loggedIn: false,\r\n            getgroups: false,\r\n            groups: null,\r\n            newPlaylist: '',\r\n            newPlaylistGroup: '',\r\n            newGroup: '',\r\n            newMember: '',\r\n            newMemberGroup: '',\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.user !== this.state.user && this.props.user !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, getgroups: true});\r\n            \r\n        }\r\n\r\n        if(this.state.groups !== null && this.props.updatedPlaylist !== null)\r\n        {\r\n            var groups = this.state.groups;\r\n            groups.map((element, i) => {\r\n                if(element.playlists.length > 0)\r\n                {\r\n                    var playlists = element.playlists;\r\n                    playlists.map((playlist, index) => {\r\n                        if(playlist.name === this.props.updatedPlaylist.name)\r\n                        {\r\n                            if(playlist.tracklist !== this.props.updatedPlaylist.tracklist)\r\n                            {\r\n                                var newgroups = groups;\r\n                                newgroups[i].playlists[index].tracklist = this.props.updatedPlaylist.tracklist;\r\n                                this.setState({groups: newgroups});\r\n                                \r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }    \r\n\r\n        if(this.state.loggedIn = true && this.state.getgroups === true)\r\n        {\r\n            this.getAllgroups();\r\n        }\r\n    }\r\n\r\n    getAllgroups() {\r\n        fetch(\"/getallgroups\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Res is: \", res);\r\n            this.setState({groups: res, getgroups: false})\r\n            \r\n        }));\r\n    }\r\n\r\n    handleSelectedPlaylist = (val) => {\r\n        this.props.getplaylist(val[0]);\r\n        this.props.getGroup(val[1]);\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    handleAddPlaylistSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newPlaylist.value !== '')\r\n        {\r\n            fetch('/createplaylist', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newplaylist: `${this.state.newPlaylist}`, relatedgroup: `${event.target.newPlaylistGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                console.log(\"addplaylist response:\", resp);\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newPlaylist: '', newPlaylistGroup: '', getgroups: true});\r\n                    console.log(this.state.newPlaylist);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddGroupSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newGroup.value !== '')\r\n        {\r\n            fetch('/creategroup', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newgroup: `${this.state.newGroup}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newGroup: '', getgroups: true});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddMemberSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.newMember.value !== '')\r\n        {\r\n            fetch('/addmember', \r\n            {\r\n                method: 'POST', \r\n                body: JSON.stringify({newMember: `${this.state.newMember}`, relatedgroup: `${event.target.newMemberGroup.value}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    this.setState({newMember: '', newMemberGroup: '', getgroups: true});\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"fullsize\">\r\n                { this.state.user !== null ?\r\n                    <div className=\"fullsize\">\r\n\r\n                        { this.state.groups !== null ?\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {   this.state.groups.map((group, index) =>\r\n                                    {\r\n                                        return (\r\n                                        <Card>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index}>\r\n                                                {group.groupname}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <h4>Members</h4>\r\n                                                    <ul>\r\n                                                        {group.members.map((member, i) => {\r\n                                                            return(<h6>{member}</h6>)\r\n                                                            })\r\n                                                        }\r\n                                                    </ul>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={3}>\r\n                                                            Add Member\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={3}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddMemberSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newMemberGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newMember\" type=\"email\" placeholder=\"Enter email\" value={this.state.newMember}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                                    <h4 className=\"btnAddPlaylist\">Playlists</h4>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <ToggleButtonGroup type=\"radio\" name=\"playlists\" vertical onChange={this.handleSelectedPlaylist}>\r\n                                                        {group.playlists.map((playlist, i) => {\r\n                                                            return(\r\n            \r\n                                                                <ToggleButton value={[this.state.groups[index].playlists[i],this.state.groups[index].groupname]} >{playlist.name}</ToggleButton>\r\n                                                                \r\n                                                            )\r\n                                                        })\r\n                                                        }\r\n                                                    </ToggleButtonGroup>\r\n                                                    <div id=\"fixedspacing\">\r\n                                                        <p></p>\r\n                                                    </div>\r\n                                                    <Accordion>\r\n                                                        <Accordion.Toggle as={Button} eventKey={2}>\r\n                                                            Create Playlist\r\n                                                        </Accordion.Toggle>\r\n                                                       \r\n                                                        <Accordion.Collapse eventKey={2}>\r\n                                                            <Card.Body>\r\n                                                                <form onSubmit={this.handleAddPlaylistSubmit}>\r\n                                                                    <Form role=\"form\">\r\n                                                                        <Form.Group>\r\n                                                                            <Form.Control name=\"newPlaylistGroup\" type=\"hidden\" value={this.state.groups[index].groupname}/>\r\n                                                                            <Form.Control onChange={this.handleInputChange} name=\"newPlaylist\" type=\"text\" placeholder=\"Enter name\" value={this.state.newPlaylist}/>\r\n                                                                            \r\n                                                                            <Button className=\"btnAddPlaylist\" variant=\"success\" type=\"submit\">\r\n                                                                                Create\r\n                                                                            </Button>\r\n                                                                        </Form.Group>\r\n                                                                    </Form>\r\n                                                                </form>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Accordion>\r\n                                              </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                        \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Accordion> \r\n                        :\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        }\r\n\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Card.Header} eventKey={1}>\r\n                                Create Group\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey={1}>\r\n                                <Card.Body>\r\n                                    <form onSubmit={this.handleAddGroupSubmit}>\r\n                                        <Form>\r\n                                            <Form.Group>\r\n                                            <Form.Control onChange={this.handleInputChange} name=\"newGroup\" type=\"text\" placeholder=\"Enter name\" value={this.state.newGroup}/>\r\n                                            </Form.Group>\r\n                                            <Button variant=\"success\" type=\"submit\">\r\n                                                Create\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </form>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                            \r\n                    </div>\r\n                    :\r\n                    <h4>Not logged in</h4>\r\n                }\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGroups;","import React, { useLayoutEffect } from 'react';\r\nimport './nextup.css';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass Nextup extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            group: '',\r\n            playlist: null,\r\n            playlistname: null,\r\n            tracklist: [[\"\", \"\"]],\r\n            nextup: 0,\r\n            searchedTrack: '',\r\n            foundTracks: [],\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.state.playlist !== this.props.playlist && this.props.playlist !== null)\r\n        { \r\n            var urilist = [];\r\n            this.props.playlist.tracklist.map((element,i) => {\r\n                    urilist[i] = element;\r\n            });\r\n            this.setState({playlist: this.props.playlist, playlistname: this.props.playlist.name, group: this.props.group});\r\n            if(urilist.length > 0)\r\n            {\r\n                this.getTrackInfos(urilist);\r\n            }\r\n            else{\r\n                this.setState({tracklist: [[\"\", \"\"]]});\r\n            }\r\n        }\r\n\r\n        if(this.state.nextup !== this.props.nextup)\r\n        {\r\n            if(this.props.nextup < this.state.tracklist.length)\r\n            {\r\n                this.setState({nextup: this.props.nextup});\r\n            }\r\n\r\n            if(this.state.tracklist.length === 0)\r\n            {\r\n                this.setState({nextup: 0});\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n\r\n    getTrackInfos = (tracklist) => {\r\n        fetch(\"/gettracksinfo\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(tracklist),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"Fetched tracks info:\", res);\r\n            var tracks = [];\r\n            res.map((track, i) => {\r\n                tracks[i] = [track.name, track.artists[0].name, track.album.name, `${(Math.floor(track.duration_ms/60000)).toFixed(0)}:${((track.duration_ms/1000)%60).toFixed(0)}`, track.uri];\r\n            });\r\n            console.log(\"Tracks:\", tracks);\r\n            this.setState({tracklist: tracks});\r\n        }));\r\n        \r\n    } \r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: [event.target.value], \r\n        })\r\n    }\r\n\r\n    searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.searchedTrack.value !== '')\r\n        {\r\n            fetch('/searchtracks', {\r\n                method:'POST',\r\n                body: JSON.stringify({searchedTrack: `${this.state.searchedTrack}`}),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(res => res.json())\r\n            .then(resp => {\r\n                if(resp !== null)\r\n                {\r\n                    console.log(\"Returned tracks:\", resp.items);\r\n                    var tracks = [];\r\n                    resp.items.map((track, index) => {\r\n                        tracks[index] = [track.name, track.artists[0].name, track.album.name, track.uri];\r\n                    })\r\n                    this.setState({foundTracks: tracks, searchedTrack: ''});\r\n                    console.log(\"tracks: \", this.state.foundTracks);\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    addSongtoMongo = (song) => {\r\n        console.log(song.target.value);\r\n        var uri = song.target.value.split(':');\r\n        fetch(\"/addtracktoplaylist\", {\r\n            method:'POST',\r\n            body: JSON.stringify({uriTrack: `${uri[2]}`,playlist: `${this.state.playlistname}`, group: `${this.state.group}`}),\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(res => res.json())\r\n        .then(resp => {\r\n            console.log(\"Playlists\", resp);\r\n            this.setState({foundTracks: []});\r\n            this.props.getUpdatedPlaylist(resp);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row nextupAddsong border\" style={{}}>\r\n                <div className=\"col-6 border-right\">\r\n                { this.state.playlist !== null ?\r\n                    <div className=\"nextup\">\r\n                        <h3>Next up: {this.state.tracklist[this.state.nextup][0]} - {this.state.tracklist[this.state.nextup][1]}</h3>\r\n                        <label>Playlist name: {this.state.playlistname}</label>\r\n                        <Table striped border>\r\n                            <thead>\r\n                                <th>#</th>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Duration</th>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.tracklist.map((element, index) => {\r\n                                return(<tr>\r\n                                    <td>{index+1}</td>\r\n                                    <td>{element[0]}</td>\r\n                                    <td>{element[1]}</td>\r\n                                    <td>{element[2]}</td>\r\n                                    <td>{element[3]}</td>\r\n                                </tr>)\r\n                            })\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                    </div>\r\n                :\r\n                    <h2 className=\"nextup\">[No playlist selected]</h2>\r\n                }\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 div className=\"nextup\">Add song to playlist</h2>\r\n                    { this.state.playlist !== null ?\r\n                    <div>\r\n                        <form class=\"form-inline justify-content-center\" onSubmit={this.searchSubmit}>\r\n                            <div class=\"form-group mb-2\">\r\n                                <input onChange={this.handleInputChange} className=\"form-control\" name=\"searchedTrack\" value={this.state.searchedTrack} type=\"text\" placeholder=\"Search song...\"/>\r\n                            </div>\r\n                            <button className=\"btn btn-success mb-2\" type=\"submit\">Search</button>\r\n                        </form>\r\n                        <Table striped border>\r\n                            <thead>\r\n                                <th>Song</th>\r\n                                <th>Artist</th>\r\n                                <th>Album</th>\r\n                                <th>Select</th>\r\n                            </thead>\r\n                            { this.state.foundTracks.length > 0 ?\r\n                                <tbody>\r\n                                {this.state.foundTracks.map((element, index) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{element[0]}</td>\r\n                                            <td>{element[1]}</td>\r\n                                            <td>{element[2]}</td>\r\n                                            <td>\r\n                                                <button onClick={this.addSongtoMongo.bind(this)} value={element[3]} className=\"btn btn-success\">Add</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                                }   \r\n                                </tbody>\r\n                                :\r\n                                <tbody>\r\n\r\n                                </tbody>\r\n                            }\r\n                            \r\n                        </Table>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Nextup;","import React from 'react';\r\nimport MyGroups from './mygroups/mygroups.js';\r\nimport Nextup from './nextup/nextup.js';\r\nimport './dashboard.css'\r\n\r\nclass Dashboard extends React.Component{\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            deviceID: null,\r\n            loggedIn: false,\r\n            item: null,\r\n            refreshToggled: false,\r\n            playbackCommandtrigger: false,\r\n            playListCommandtrigger: false,\r\n            changePlaybackTriggerNext: false,\r\n            changePlaybackTriggerPrevious: false,\r\n            changePlayback: null,\r\n            playback: null,\r\n            playlistDisplay: null,\r\n            iteratorPlaylist:0,\r\n            group: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.props.user !== this.state.user && this.props.user !== null && this.props.deviceID !== this.state.deviceID && this.props.deviceID !== null) // when user changes\r\n        {\r\n            this.setState({user: this.props.user, loggedIn: true, deviceID: this.props.deviceID});\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.refreshToggled)\r\n        {\r\n            console.log('Refreshed');\r\n            this.getMusicInfo();\r\n        }\r\n\r\n        if(this.state.playbackCommandtrigger)\r\n        {\r\n            console.log('Triggered Play/pause');\r\n            if(this.state.playback === true)\r\n            {\r\n                console.log('play');\r\n                this.playpausePlayback(\"play\");\r\n            }\r\n            else\r\n            {\r\n                console.log('pause');\r\n                this.playpausePlayback(\"pause\");\r\n            } \r\n        }\r\n\r\n        if(this.state.changePlaybackTriggerNext)\r\n        {\r\n            \r\n            var i = this.state.iteratorPlaylist;\r\n            console.log(\"size:\", this.state.playlistDisplay.tracklist.length);\r\n            console.log(\"iterator: \", i);\r\n            console.log('next song: ',this.state.playlistDisplay.tracklist[i]);\r\n            //this.changePlaybackNext();\r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n            \r\n        }\r\n        if(this.state.changePlaybackTriggerPrevious)\r\n        {   \r\n            if(this.state.iteratorPlaylist > 0)\r\n            {\r\n                var i = this.state.iteratorPlaylist -1;\r\n            }\r\n            else\r\n            {\r\n                var i = 0;\r\n            }\r\n            console.log('previous song: ',this.state.playlistDisplay.tracklist[i]);\r\n            \r\n            this.playSong(this.state.playlistDisplay.tracklist[i]);\r\n        }\r\n    }\r\n\r\n    getMusicInfo = () => {\r\n        console.log(\"Fetching playback info...\");\r\n        fetch(\"/getplayback\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            console.log(\"res is:\" , res);\r\n            if(res !== null && res!== undefined)\r\n            {\r\n                console.log(\"Fetched!\");\r\n                this.setState({\r\n                    item: res.item,\r\n                    refreshToggled: false,\r\n                    playback: res.is_playing,\r\n                });\r\n            }\r\n        })\r\n        );\r\n    }\r\n    \r\n    playpausePlayback = (action) => {\r\n        console.log(\"Playing/pausing playback...\");\r\n        fetch(\"/\"+action)\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Done!: \", res);\r\n                this.setState({\r\n                    playbackCommandtrigger: false,\r\n                });\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    playSong = (songuri) => {\r\n        fetch(\"/playsong\", \r\n        {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({uri: `${songuri}`, deviceID: `${this.state.deviceID}`}),\r\n        }).then(res => res.json()\r\n        .then(res => {\r\n            console.log(res);\r\n            if((this.state.iteratorPlaylist + 1) < this.state.playlistDisplay.tracklist.length)\r\n            {\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    if(this.state.changePlaybackTriggerNext)\r\n                    {\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerNext: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                    else if(this.state.changePlaybackTriggerPrevious){\r\n                        this.setState({\r\n                            refreshToggled: true,\r\n                            changePlaybackTriggerPrevious: false,\r\n                            iteratorPlaylist: this.state.iteratorPlaylist + 1,\r\n                        });\r\n                    }\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n            else{\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true, changePlaybackTriggerNext: false, iteratorPlaylist: 0});\r\n                    console.log(\"Reset iterator: \", this.state.iteratorPlaylist);\r\n                \r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n            }\r\n           \r\n        }));\r\n        \r\n    } \r\n\r\n    changePlaybackNext = () => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/next\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerNext: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    changePlaybackPrevious = (action) => {\r\n        console.log(\"Changing playback...\");\r\n        fetch(\"/previous\")\r\n        .then(res => res.json()\r\n        .then(res => {\r\n            \r\n            if(res !== null)\r\n            {\r\n                console.log(\"Fetched!: \", res);\r\n                this.setState({\r\n                    changePlaybackTriggerPrevious: false,\r\n                });\r\n                console.log(\"Waiting for spotify to change song...\");\r\n                setTimeout( () => {\r\n                    this.setState({refreshToggled: true});\r\n                }, 1000); // Not good practice, should find a way to coordinate with spotify, but can't predict when it'll actually have changed the song\r\n                    \r\n            }\r\n            else{\r\n                alert(\"Error from spotify\");\r\n            }\r\n        })\r\n        );\r\n        \r\n    }\r\n\r\n    getSelectedPlaylist = (playlist) => {\r\n        console.log(\"Got selected playlist in dashboard: \", playlist.name);\r\n        this.setState({playlistDisplay: playlist, iteratorPlaylist: 0});\r\n    }\r\n\r\n    getSelectedGroup = (group) => {\r\n        console.log(\"Got selected group in dashboard: \", group);\r\n        this.setState({group: group});\r\n    }\r\n\r\n    addedSongtoPlaylist = (newplaylist) => {\r\n        console.log(\"Got updated playlist in dashboard: \", newplaylist);\r\n        this.setState({playlistDisplay: newplaylist});\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div id=\"mainrow\" className=\"row\">    \r\n                <div id=\"mygroups\" className=\"col-2 border-right border-top\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h2>My groups</h2>\r\n                        <MyGroups user={this.state.user} getplaylist={this.getSelectedPlaylist} getGroup={this.getSelectedGroup} updatedPlaylist={this.state.playlistDisplay}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <div className=\"row nowplaying border-bottom border-top\">\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <div>    \r\n                                    <h2>Now Playing: [Nothing is playing]</h2>\r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playlistDisplay !== null ?\r\n                                        <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Play Next</button>\r\n                                    :\r\n                                        <div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            : \r\n                                <div>\r\n                                    <h2>Now Playing:</h2>\r\n                                    <h5>{this.state.item.name}</h5>\r\n                                    <h6>Artist: {this.state.item.artists[0].name}</h6>\r\n                                    <h6>Album: {this.state.item.album.name}</h6>\r\n                                    \r\n                                    <button className=\"btn btn-warning\" onClick={() => this.setState({refreshToggled: true})}>Refresh</button>\r\n                                    { this.state.playback ?\r\n                                        <button className=\"btn btn-danger\" onClick={() => this.setState({playbackCommandtrigger: true, playback: false})}>Pause</button>\r\n                                    :\r\n                                        <button className=\"btn btn-success\" onClick={() => this.setState({playbackCommandtrigger: true, playback: true})}>Play</button>\r\n                                    }\r\n                                    { this.state.playlistDisplay !== null ?\r\n                                    <button className=\"btn btn-primary\" onClick={() => this.setState({changePlaybackTriggerNext: true})}>Next</button>    \r\n                                    :\r\n                                    <div></div>\r\n                                    }\r\n                                    \r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            { (this.state.item === null || this.state.item === undefined) ?\r\n                                <h2></h2>\r\n                            :\r\n                                <div>\r\n                                    <img src={`${this.state.item.album.images[1].url}`} alt=\"Cover\"></img> \r\n                                    \r\n                                </div>\r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <Nextup playlist={this.state.playlistDisplay} getUpdatedPlaylist={this.addedSongtoPlaylist} group={this.state.group} nextup={this.state.iteratorPlaylist}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"chat\" className=\"col-3 border-left border-top\">\r\n                    <h2>Chat</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport TopHeader from './topheader/topheader';\nimport Dashboard from './dashboard/dashboard';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      loggedIn: false,\n      userState: null,\n      deviceID: null,\n    };\n  };\n\n  componentDidMount(){\n    console.log(\"fetching getUser...\");\n    fetch(\"/getUser\")\n    .then(res => res.json()\n    .then(res => {\n      if(res !== this.state.userState)\n      {\n        console.log(\"Fetched!\");\n        this.setState({userState: res});\n      }\n    }));\n  }\n\n  componentDidUpdate(){\n    if(this.state.deviceID === null)\n    {\n      fetch(\"/mydevices\")\n      .then(res => res.json()\n      .then(res => {\n        if(res !== this.state.deviceID)\n        {\n          this.setState({deviceID: res});\n        }\n      }));\n    }\n  }\n\n\n  render()\n  {  \n    return (\n      <div className=\"App\">\n\n          <TopHeader user={this.state.userState}/>\n        <div className=\"container-fluid\">  \n          <Dashboard user={this.state.userState} deviceID={this.state.deviceID}/>\n        </div>\n        \n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}